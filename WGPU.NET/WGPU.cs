//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;

namespace WGPU.NET
{
    using System.Runtime.InteropServices;
    
    public static partial class Wgpu
    {
        public enum AdapterType : int
        {
            DiscreteGPU = 0x00000000,
            
            IntegratedGPU = 0x00000001,
            
            CPU = 0x00000002,
            
            Unknown = 0x00000003,
            
            Force32 = 0x7FFFFFFF,
        }
        
        public enum AddressMode : int
        {
            Repeat = 0x00000000,
            
            MirrorRepeat = 0x00000001,
            
            ClampToEdge = 0x00000002,
            
            Force32 = 0x7FFFFFFF,
        }
        
        public enum BackendType : int
        {
            Null = 0x00000000,
            
            WebGPU = 0x00000001,
            
            D3D11 = 0x00000002,
            
            D3D12 = 0x00000003,
            
            Metal = 0x00000004,
            
            Vulkan = 0x00000005,
            
            OpenGL = 0x00000006,
            
            OpenGLES = 0x00000007,
            
            Force32 = 0x7FFFFFFF,
        }
        
        public enum BlendFactor : int
        {
            Zero = 0x00000000,
            
            One = 0x00000001,
            
            Src = 0x00000002,
            
            OneMinusSrc = 0x00000003,
            
            SrcAlpha = 0x00000004,
            
            OneMinusSrcAlpha = 0x00000005,
            
            Dst = 0x00000006,
            
            OneMinusDst = 0x00000007,
            
            DstAlpha = 0x00000008,
            
            OneMinusDstAlpha = 0x00000009,
            
            SrcAlphaSaturated = 0x0000000A,
            
            Constant = 0x0000000B,
            
            OneMinusConstant = 0x0000000C,
            
            Force32 = 0x7FFFFFFF,
        }
        
        public enum BlendOperation : int
        {
            Add = 0x00000000,
            
            Subtract = 0x00000001,
            
            ReverseSubtract = 0x00000002,
            
            Min = 0x00000003,
            
            Max = 0x00000004,
            
            Force32 = 0x7FFFFFFF,
        }
        
        public enum BufferBindingType : int
        {
            Undefined = 0x00000000,
            
            Uniform = 0x00000001,
            
            Storage = 0x00000002,
            
            ReadOnlyStorage = 0x00000003,
            
            Force32 = 0x7FFFFFFF,
        }
        
        public enum BufferMapAsyncStatus : int
        {
            Success = 0x00000000,
            
            Error = 0x00000001,
            
            Unknown = 0x00000002,
            
            DeviceLost = 0x00000003,
            
            DestroyedBeforeCallback = 0x00000004,
            
            UnmappedBeforeCallback = 0x00000005,
            
            Force32 = 0x7FFFFFFF,
        }
        
        public enum CompareFunction : int
        {
            Undefined = 0x00000000,
            
            Never = 0x00000001,
            
            Less = 0x00000002,
            
            LessEqual = 0x00000003,
            
            Greater = 0x00000004,
            
            GreaterEqual = 0x00000005,
            
            Equal = 0x00000006,
            
            NotEqual = 0x00000007,
            
            Always = 0x00000008,
            
            Force32 = 0x7FFFFFFF,
        }
        
        public enum CompilationMessageType : int
        {
            Error = 0x00000000,
            
            Warning = 0x00000001,
            
            Info = 0x00000002,
            
            Force32 = 0x7FFFFFFF,
        }
        
        public enum CreatePipelineAsyncStatus : int
        {
            Success = 0x00000000,
            
            Error = 0x00000001,
            
            DeviceLost = 0x00000002,
            
            DeviceDestroyed = 0x00000003,
            
            Unknown = 0x00000004,
            
            Force32 = 0x7FFFFFFF,
        }
        
        public enum CullMode : int
        {
            None = 0x00000000,
            
            Front = 0x00000001,
            
            Back = 0x00000002,
            
            Force32 = 0x7FFFFFFF,
        }
        
        public enum DeviceLostReason : int
        {
            Undefined = 0x00000000,
            
            Destroyed = 0x00000001,
            
            Force32 = 0x7FFFFFFF,
        }
        
        public enum ErrorFilter : int
        {
            None = 0x00000000,
            
            Validation = 0x00000001,
            
            OutOfMemory = 0x00000002,
            
            Force32 = 0x7FFFFFFF,
        }
        
        public enum ErrorType : int
        {
            NoError = 0x00000000,
            
            Validation = 0x00000001,
            
            OutOfMemory = 0x00000002,
            
            Unknown = 0x00000003,
            
            DeviceLost = 0x00000004,
            
            Force32 = 0x7FFFFFFF,
        }
        
        public enum FeatureName : int
        {
            Undefined = 0x00000000,
            
            DepthClamping = 0x00000001,
            
            Depth24UnormStencil8 = 0x00000002,
            
            Depth32FloatStencil8 = 0x00000003,
            
            TimestampQuery = 0x00000004,
            
            PipelineStatisticsQuery = 0x00000005,
            
            TextureCompressionBC = 0x00000006,
            
            Force32 = 0x7FFFFFFF,
        }
        
        public enum FilterMode : int
        {
            Nearest = 0x00000000,
            
            Linear = 0x00000001,
            
            Force32 = 0x7FFFFFFF,
        }
        
        public enum FrontFace : int
        {
            CCW = 0x00000000,
            
            CW = 0x00000001,
            
            Force32 = 0x7FFFFFFF,
        }
        
        public enum IndexFormat : int
        {
            Undefined = 0x00000000,
            
            Uint16 = 0x00000001,
            
            Uint32 = 0x00000002,
            
            Force32 = 0x7FFFFFFF,
        }
        
        public enum LoadOp : int
        {
            Clear = 0x00000000,
            
            Load = 0x00000001,
            
            Force32 = 0x7FFFFFFF,
        }
        
        public enum PipelineStatisticName : int
        {
            VertexShaderInvocations = 0x00000000,
            
            ClipperInvocations = 0x00000001,
            
            ClipperPrimitivesOut = 0x00000002,
            
            FragmentShaderInvocations = 0x00000003,
            
            ComputeShaderInvocations = 0x00000004,
            
            Force32 = 0x7FFFFFFF,
        }
        
        public enum PowerPreference : int
        {
            LowPower = 0x00000000,
            
            HighPerformance = 0x00000001,
            
            Force32 = 0x7FFFFFFF,
        }
        
        public enum PresentMode : int
        {
            Immediate = 0x00000000,
            
            Mailbox = 0x00000001,
            
            Fifo = 0x00000002,
            
            Force32 = 0x7FFFFFFF,
        }
        
        public enum PrimitiveTopology : int
        {
            PointList = 0x00000000,
            
            LineList = 0x00000001,
            
            LineStrip = 0x00000002,
            
            TriangleList = 0x00000003,
            
            TriangleStrip = 0x00000004,
            
            Force32 = 0x7FFFFFFF,
        }
        
        public enum QueryType : int
        {
            Occlusion = 0x00000000,
            
            PipelineStatistics = 0x00000001,
            
            Timestamp = 0x00000002,
            
            Force32 = 0x7FFFFFFF,
        }
        
        public enum QueueWorkDoneStatus : int
        {
            Success = 0x00000000,
            
            Error = 0x00000001,
            
            Unknown = 0x00000002,
            
            DeviceLost = 0x00000003,
            
            Force32 = 0x7FFFFFFF,
        }
        
        public enum RequestAdapterStatus : int
        {
            Success = 0x00000000,
            
            Unavailable = 0x00000001,
            
            Error = 0x00000002,
            
            Unknown = 0x00000003,
            
            Force32 = 0x7FFFFFFF,
        }
        
        public enum RequestDeviceStatus : int
        {
            Success = 0x00000000,
            
            Error = 0x00000001,
            
            Unknown = 0x00000002,
            
            Force32 = 0x7FFFFFFF,
        }
        
        public enum SType : int
        {
            Invalid = 0x00000000,
            
            SurfaceDescriptorFromMetalLayer = 0x00000001,
            
            SurfaceDescriptorFromWindowsHWND = 0x00000002,
            
            SurfaceDescriptorFromXlib = 0x00000003,
            
            SurfaceDescriptorFromCanvasHTMLSelector = 0x00000004,
            
            ShaderModuleSPIRVDescriptor = 0x00000005,
            
            ShaderModuleWGSLDescriptor = 0x00000006,
            
            PrimitiveDepthClampingState = 0x00000007,
            
            Force32 = 0x7FFFFFFF,
        }
        
        public enum SamplerBindingType : int
        {
            Undefined = 0x00000000,
            
            Filtering = 0x00000001,
            
            NonFiltering = 0x00000002,
            
            Comparison = 0x00000003,
            
            Force32 = 0x7FFFFFFF,
        }
        
        public enum StencilOperation : int
        {
            Keep = 0x00000000,
            
            Zero = 0x00000001,
            
            Replace = 0x00000002,
            
            Invert = 0x00000003,
            
            IncrementClamp = 0x00000004,
            
            DecrementClamp = 0x00000005,
            
            IncrementWrap = 0x00000006,
            
            DecrementWrap = 0x00000007,
            
            Force32 = 0x7FFFFFFF,
        }
        
        public enum StorageTextureAccess : int
        {
            Undefined = 0x00000000,
            
            WriteOnly = 0x00000001,
            
            Force32 = 0x7FFFFFFF,
        }
        
        public enum StoreOp : int
        {
            Store = 0x00000000,
            
            Discard = 0x00000001,
            
            Force32 = 0x7FFFFFFF,
        }
        
        public enum TextureAspect : int
        {
            All = 0x00000000,
            
            StencilOnly = 0x00000001,
            
            DepthOnly = 0x00000002,
            
            Force32 = 0x7FFFFFFF,
        }
        
        public enum TextureComponentType : int
        {
            Float = 0x00000000,
            
            Sint = 0x00000001,
            
            Uint = 0x00000002,
            
            DepthComparison = 0x00000003,
            
            Force32 = 0x7FFFFFFF,
        }
        
        public enum TextureDimension : int
        {
            OneDimension = 0x00000000,
            
            TwoDimensions = 0x00000001,
            
            ThreeDimensions = 0x00000002,
            
            Force32 = 0x7FFFFFFF,
        }
        
        public enum TextureFormat : int
        {
            Undefined = 0x00000000,
            
            R8Unorm = 0x00000001,
            
            R8Snorm = 0x00000002,
            
            R8Uint = 0x00000003,
            
            R8Sint = 0x00000004,
            
            R16Uint = 0x00000005,
            
            R16Sint = 0x00000006,
            
            R16Float = 0x00000007,
            
            RG8Unorm = 0x00000008,
            
            RG8Snorm = 0x00000009,
            
            RG8Uint = 0x0000000A,
            
            RG8Sint = 0x0000000B,
            
            R32Float = 0x0000000C,
            
            R32Uint = 0x0000000D,
            
            R32Sint = 0x0000000E,
            
            RG16Uint = 0x0000000F,
            
            RG16Sint = 0x00000010,
            
            RG16Float = 0x00000011,
            
            RGBA8Unorm = 0x00000012,
            
            RGBA8UnormSrgb = 0x00000013,
            
            RGBA8Snorm = 0x00000014,
            
            RGBA8Uint = 0x00000015,
            
            RGBA8Sint = 0x00000016,
            
            BGRA8Unorm = 0x00000017,
            
            BGRA8UnormSrgb = 0x00000018,
            
            RGB10A2Unorm = 0x00000019,
            
            RG11B10Ufloat = 0x0000001A,
            
            RGB9E5Ufloat = 0x0000001B,
            
            RG32Float = 0x0000001C,
            
            RG32Uint = 0x0000001D,
            
            RG32Sint = 0x0000001E,
            
            RGBA16Uint = 0x0000001F,
            
            RGBA16Sint = 0x00000020,
            
            RGBA16Float = 0x00000021,
            
            RGBA32Float = 0x00000022,
            
            RGBA32Uint = 0x00000023,
            
            RGBA32Sint = 0x00000024,
            
            Stencil8 = 0x00000025,
            
            Depth16Unorm = 0x00000026,
            
            Depth24Plus = 0x00000027,
            
            Depth24PlusStencil8 = 0x00000028,
            
            Depth32Float = 0x00000029,
            
            BC1RGBAUnorm = 0x0000002A,
            
            BC1RGBAUnormSrgb = 0x0000002B,
            
            BC2RGBAUnorm = 0x0000002C,
            
            BC2RGBAUnormSrgb = 0x0000002D,
            
            BC3RGBAUnorm = 0x0000002E,
            
            BC3RGBAUnormSrgb = 0x0000002F,
            
            BC4RUnorm = 0x00000030,
            
            BC4RSnorm = 0x00000031,
            
            BC5RGUnorm = 0x00000032,
            
            BC5RGSnorm = 0x00000033,
            
            BC6HRGBUfloat = 0x00000034,
            
            BC6HRGBFloat = 0x00000035,
            
            BC7RGBAUnorm = 0x00000036,
            
            BC7RGBAUnormSrgb = 0x00000037,
            
            Force32 = 0x7FFFFFFF,
        }
        
        public enum TextureSampleType : int
        {
            Undefined = 0x00000000,
            
            Float = 0x00000001,
            
            UnfilterableFloat = 0x00000002,
            
            Depth = 0x00000003,
            
            Sint = 0x00000004,
            
            Uint = 0x00000005,
            
            Force32 = 0x7FFFFFFF,
        }
        
        public enum TextureViewDimension : int
        {
            Undefined = 0x00000000,
            
            OneDimension = 0x00000001,
            
            TwoDimensions = 0x00000002,
            
            TwoDimensionalArray = 0x00000003,
            
            Cube = 0x00000004,
            
            CubeArray = 0x00000005,
            
            ThreeDimensions = 0x00000006,
            
            Force32 = 0x7FFFFFFF,
        }
        
        public enum VertexFormat : int
        {
            Undefined = 0x00000000,
            
            Uint8x2 = 0x00000001,
            
            Uint8x4 = 0x00000002,
            
            Sint8x2 = 0x00000003,
            
            Sint8x4 = 0x00000004,
            
            Unorm8x2 = 0x00000005,
            
            Unorm8x4 = 0x00000006,
            
            Snorm8x2 = 0x00000007,
            
            Snorm8x4 = 0x00000008,
            
            Uint16x2 = 0x00000009,
            
            Uint16x4 = 0x0000000A,
            
            Sint16x2 = 0x0000000B,
            
            Sint16x4 = 0x0000000C,
            
            Unorm16x2 = 0x0000000D,
            
            Unorm16x4 = 0x0000000E,
            
            Snorm16x2 = 0x0000000F,
            
            Snorm16x4 = 0x00000010,
            
            Float16x2 = 0x00000011,
            
            Float16x4 = 0x00000012,
            
            Float32 = 0x00000013,
            
            Float32x2 = 0x00000014,
            
            Float32x3 = 0x00000015,
            
            Float32x4 = 0x00000016,
            
            Uint32 = 0x00000017,
            
            Uint32x2 = 0x00000018,
            
            Uint32x3 = 0x00000019,
            
            Uint32x4 = 0x0000001A,
            
            Sint32 = 0x0000001B,
            
            Sint32x2 = 0x0000001C,
            
            Sint32x3 = 0x0000001D,
            
            Sint32x4 = 0x0000001E,
            
            Force32 = 0x7FFFFFFF,
        }
        
        public enum VertexStepMode : int
        {
            Vertex = 0x00000000,
            
            Instance = 0x00000001,
            
            Force32 = 0x7FFFFFFF,
        }
        
        public enum BufferUsage : int
        {
            None = 0x00000000,
            
            MapRead = 0x00000001,
            
            MapWrite = 0x00000002,
            
            CopySrc = 0x00000004,
            
            CopyDst = 0x00000008,
            
            Index = 0x00000010,
            
            Vertex = 0x00000020,
            
            Uniform = 0x00000040,
            
            Storage = 0x00000080,
            
            Indirect = 0x00000100,
            
            QueryResolve = 0x00000200,
            
            Force32 = 0x7FFFFFFF,
        }
        
        public enum ColorWriteMask : int
        {
            None = 0x00000000,
            
            Red = 0x00000001,
            
            Green = 0x00000002,
            
            Blue = 0x00000004,
            
            Alpha = 0x00000008,
            
            All = 0x0000000F,
            
            Force32 = 0x7FFFFFFF,
        }
        
        public enum MapMode : int
        {
            None = 0x00000000,
            
            Read = 0x00000001,
            
            Write = 0x00000002,
            
            Force32 = 0x7FFFFFFF,
        }
        
        public enum ShaderStage : int
        {
            None = 0x00000000,
            
            Vertex = 0x00000001,
            
            Fragment = 0x00000002,
            
            Compute = 0x00000004,
            
            Force32 = 0x7FFFFFFF,
        }
        
        public enum TextureUsage : int
        {
            None = 0x00000000,
            
            CopySrc = 0x00000001,
            
            CopyDst = 0x00000002,
            
            TextureBinding = 0x00000004,
            
            StorageBinding = 0x00000008,
            
            RenderAttachment = 0x00000010,
            
            Force32 = 0x7FFFFFFF,
        }
        
        public enum NativeSType : int
        {
            /// <summary>
            /// Start at 6 to prevent collisions with webgpu STypes
            /// </summary>
            STypeDeviceExtras = 0x60000001,
            
            /// <summary>
            /// Start at 6 to prevent collisions with webgpu STypes
            /// </summary>
            STypeAdapterExtras = 0x60000002,
            
            /// <summary>
            /// Start at 6 to prevent collisions with webgpu STypes
            /// </summary>
            Force32 = 0x7FFFFFFF,
        }
        
        public enum NativeFeature : int
        {
            TEXTUREADAPTERSPECIFICFORMATFEATURES = 0x10000000,
        }
        
        public enum LogLevel : int
        {
            Off = 0x00000000,
            
            Error = 0x00000001,
            
            Warn = 0x00000002,
            
            Info = 0x00000003,
            
            Debug = 0x00000004,
            
            Trace = 0x00000005,
            
            Force32 = 0x7FFFFFFF,
        }
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public readonly partial struct AdapterImpl : IEquatable<AdapterImpl>
        {
            private readonly IntPtr _handle;
            
            public AdapterImpl(IntPtr handle) => _handle = handle;
            
            public IntPtr Handle => _handle;
            
            public bool Equals(AdapterImpl other) => _handle.Equals(other._handle);
            
            public override bool Equals(object obj) => obj is AdapterImpl other && Equals(other);
            
            public override int GetHashCode() => _handle.GetHashCode();
            
            public override string ToString() => "0x" + (IntPtr.Size == 8 ? _handle.ToString("X16") : _handle.ToString("X8"));
            
            public static bool operator ==(AdapterImpl left, AdapterImpl right) => left.Equals(right);
            
            public static bool operator !=(AdapterImpl left, AdapterImpl right) => !left.Equals(right);
        }
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public readonly partial struct BindGroupImpl : IEquatable<BindGroupImpl>
        {
            private readonly IntPtr _handle;
            
            public BindGroupImpl(IntPtr handle) => _handle = handle;
            
            public IntPtr Handle => _handle;
            
            public bool Equals(BindGroupImpl other) => _handle.Equals(other._handle);
            
            public override bool Equals(object obj) => obj is BindGroupImpl other && Equals(other);
            
            public override int GetHashCode() => _handle.GetHashCode();
            
            public override string ToString() => "0x" + (IntPtr.Size == 8 ? _handle.ToString("X16") : _handle.ToString("X8"));
            
            public static bool operator ==(BindGroupImpl left, BindGroupImpl right) => left.Equals(right);
            
            public static bool operator !=(BindGroupImpl left, BindGroupImpl right) => !left.Equals(right);
        }
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public readonly partial struct BindGroupLayoutImpl : IEquatable<BindGroupLayoutImpl>
        {
            private readonly IntPtr _handle;
            
            public BindGroupLayoutImpl(IntPtr handle) => _handle = handle;
            
            public IntPtr Handle => _handle;
            
            public bool Equals(BindGroupLayoutImpl other) => _handle.Equals(other._handle);
            
            public override bool Equals(object obj) => obj is BindGroupLayoutImpl other && Equals(other);
            
            public override int GetHashCode() => _handle.GetHashCode();
            
            public override string ToString() => "0x" + (IntPtr.Size == 8 ? _handle.ToString("X16") : _handle.ToString("X8"));
            
            public static bool operator ==(BindGroupLayoutImpl left, BindGroupLayoutImpl right) => left.Equals(right);
            
            public static bool operator !=(BindGroupLayoutImpl left, BindGroupLayoutImpl right) => !left.Equals(right);
        }
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public readonly partial struct BufferImpl : IEquatable<BufferImpl>
        {
            private readonly IntPtr _handle;
            
            public BufferImpl(IntPtr handle) => _handle = handle;
            
            public IntPtr Handle => _handle;
            
            public bool Equals(BufferImpl other) => _handle.Equals(other._handle);
            
            public override bool Equals(object obj) => obj is BufferImpl other && Equals(other);
            
            public override int GetHashCode() => _handle.GetHashCode();
            
            public override string ToString() => "0x" + (IntPtr.Size == 8 ? _handle.ToString("X16") : _handle.ToString("X8"));
            
            public static bool operator ==(BufferImpl left, BufferImpl right) => left.Equals(right);
            
            public static bool operator !=(BufferImpl left, BufferImpl right) => !left.Equals(right);
        }
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public readonly partial struct CommandBufferImpl : IEquatable<CommandBufferImpl>
        {
            private readonly IntPtr _handle;
            
            public CommandBufferImpl(IntPtr handle) => _handle = handle;
            
            public IntPtr Handle => _handle;
            
            public bool Equals(CommandBufferImpl other) => _handle.Equals(other._handle);
            
            public override bool Equals(object obj) => obj is CommandBufferImpl other && Equals(other);
            
            public override int GetHashCode() => _handle.GetHashCode();
            
            public override string ToString() => "0x" + (IntPtr.Size == 8 ? _handle.ToString("X16") : _handle.ToString("X8"));
            
            public static bool operator ==(CommandBufferImpl left, CommandBufferImpl right) => left.Equals(right);
            
            public static bool operator !=(CommandBufferImpl left, CommandBufferImpl right) => !left.Equals(right);
        }
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public readonly partial struct CommandEncoderImpl : IEquatable<CommandEncoderImpl>
        {
            private readonly IntPtr _handle;
            
            public CommandEncoderImpl(IntPtr handle) => _handle = handle;
            
            public IntPtr Handle => _handle;
            
            public bool Equals(CommandEncoderImpl other) => _handle.Equals(other._handle);
            
            public override bool Equals(object obj) => obj is CommandEncoderImpl other && Equals(other);
            
            public override int GetHashCode() => _handle.GetHashCode();
            
            public override string ToString() => "0x" + (IntPtr.Size == 8 ? _handle.ToString("X16") : _handle.ToString("X8"));
            
            public static bool operator ==(CommandEncoderImpl left, CommandEncoderImpl right) => left.Equals(right);
            
            public static bool operator !=(CommandEncoderImpl left, CommandEncoderImpl right) => !left.Equals(right);
        }
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public readonly partial struct ComputePassEncoderImpl : IEquatable<ComputePassEncoderImpl>
        {
            private readonly IntPtr _handle;
            
            public ComputePassEncoderImpl(IntPtr handle) => _handle = handle;
            
            public IntPtr Handle => _handle;
            
            public bool Equals(ComputePassEncoderImpl other) => _handle.Equals(other._handle);
            
            public override bool Equals(object obj) => obj is ComputePassEncoderImpl other && Equals(other);
            
            public override int GetHashCode() => _handle.GetHashCode();
            
            public override string ToString() => "0x" + (IntPtr.Size == 8 ? _handle.ToString("X16") : _handle.ToString("X8"));
            
            public static bool operator ==(ComputePassEncoderImpl left, ComputePassEncoderImpl right) => left.Equals(right);
            
            public static bool operator !=(ComputePassEncoderImpl left, ComputePassEncoderImpl right) => !left.Equals(right);
        }
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public readonly partial struct ComputePipelineImpl : IEquatable<ComputePipelineImpl>
        {
            private readonly IntPtr _handle;
            
            public ComputePipelineImpl(IntPtr handle) => _handle = handle;
            
            public IntPtr Handle => _handle;
            
            public bool Equals(ComputePipelineImpl other) => _handle.Equals(other._handle);
            
            public override bool Equals(object obj) => obj is ComputePipelineImpl other && Equals(other);
            
            public override int GetHashCode() => _handle.GetHashCode();
            
            public override string ToString() => "0x" + (IntPtr.Size == 8 ? _handle.ToString("X16") : _handle.ToString("X8"));
            
            public static bool operator ==(ComputePipelineImpl left, ComputePipelineImpl right) => left.Equals(right);
            
            public static bool operator !=(ComputePipelineImpl left, ComputePipelineImpl right) => !left.Equals(right);
        }
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public readonly partial struct DeviceImpl : IEquatable<DeviceImpl>
        {
            private readonly IntPtr _handle;
            
            public DeviceImpl(IntPtr handle) => _handle = handle;
            
            public IntPtr Handle => _handle;
            
            public bool Equals(DeviceImpl other) => _handle.Equals(other._handle);
            
            public override bool Equals(object obj) => obj is DeviceImpl other && Equals(other);
            
            public override int GetHashCode() => _handle.GetHashCode();
            
            public override string ToString() => "0x" + (IntPtr.Size == 8 ? _handle.ToString("X16") : _handle.ToString("X8"));
            
            public static bool operator ==(DeviceImpl left, DeviceImpl right) => left.Equals(right);
            
            public static bool operator !=(DeviceImpl left, DeviceImpl right) => !left.Equals(right);
        }
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public readonly partial struct InstanceImpl : IEquatable<InstanceImpl>
        {
            private readonly IntPtr _handle;
            
            public InstanceImpl(IntPtr handle) => _handle = handle;
            
            public IntPtr Handle => _handle;
            
            public bool Equals(InstanceImpl other) => _handle.Equals(other._handle);
            
            public override bool Equals(object obj) => obj is InstanceImpl other && Equals(other);
            
            public override int GetHashCode() => _handle.GetHashCode();
            
            public override string ToString() => "0x" + (IntPtr.Size == 8 ? _handle.ToString("X16") : _handle.ToString("X8"));
            
            public static bool operator ==(InstanceImpl left, InstanceImpl right) => left.Equals(right);
            
            public static bool operator !=(InstanceImpl left, InstanceImpl right) => !left.Equals(right);
        }
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public readonly partial struct PipelineLayoutImpl : IEquatable<PipelineLayoutImpl>
        {
            private readonly IntPtr _handle;
            
            public PipelineLayoutImpl(IntPtr handle) => _handle = handle;
            
            public IntPtr Handle => _handle;
            
            public bool Equals(PipelineLayoutImpl other) => _handle.Equals(other._handle);
            
            public override bool Equals(object obj) => obj is PipelineLayoutImpl other && Equals(other);
            
            public override int GetHashCode() => _handle.GetHashCode();
            
            public override string ToString() => "0x" + (IntPtr.Size == 8 ? _handle.ToString("X16") : _handle.ToString("X8"));
            
            public static bool operator ==(PipelineLayoutImpl left, PipelineLayoutImpl right) => left.Equals(right);
            
            public static bool operator !=(PipelineLayoutImpl left, PipelineLayoutImpl right) => !left.Equals(right);
        }
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public readonly partial struct QuerySetImpl : IEquatable<QuerySetImpl>
        {
            private readonly IntPtr _handle;
            
            public QuerySetImpl(IntPtr handle) => _handle = handle;
            
            public IntPtr Handle => _handle;
            
            public bool Equals(QuerySetImpl other) => _handle.Equals(other._handle);
            
            public override bool Equals(object obj) => obj is QuerySetImpl other && Equals(other);
            
            public override int GetHashCode() => _handle.GetHashCode();
            
            public override string ToString() => "0x" + (IntPtr.Size == 8 ? _handle.ToString("X16") : _handle.ToString("X8"));
            
            public static bool operator ==(QuerySetImpl left, QuerySetImpl right) => left.Equals(right);
            
            public static bool operator !=(QuerySetImpl left, QuerySetImpl right) => !left.Equals(right);
        }
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public readonly partial struct QueueImpl : IEquatable<QueueImpl>
        {
            private readonly IntPtr _handle;
            
            public QueueImpl(IntPtr handle) => _handle = handle;
            
            public IntPtr Handle => _handle;
            
            public bool Equals(QueueImpl other) => _handle.Equals(other._handle);
            
            public override bool Equals(object obj) => obj is QueueImpl other && Equals(other);
            
            public override int GetHashCode() => _handle.GetHashCode();
            
            public override string ToString() => "0x" + (IntPtr.Size == 8 ? _handle.ToString("X16") : _handle.ToString("X8"));
            
            public static bool operator ==(QueueImpl left, QueueImpl right) => left.Equals(right);
            
            public static bool operator !=(QueueImpl left, QueueImpl right) => !left.Equals(right);
        }
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public readonly partial struct RenderBundleImpl : IEquatable<RenderBundleImpl>
        {
            private readonly IntPtr _handle;
            
            public RenderBundleImpl(IntPtr handle) => _handle = handle;
            
            public IntPtr Handle => _handle;
            
            public bool Equals(RenderBundleImpl other) => _handle.Equals(other._handle);
            
            public override bool Equals(object obj) => obj is RenderBundleImpl other && Equals(other);
            
            public override int GetHashCode() => _handle.GetHashCode();
            
            public override string ToString() => "0x" + (IntPtr.Size == 8 ? _handle.ToString("X16") : _handle.ToString("X8"));
            
            public static bool operator ==(RenderBundleImpl left, RenderBundleImpl right) => left.Equals(right);
            
            public static bool operator !=(RenderBundleImpl left, RenderBundleImpl right) => !left.Equals(right);
        }
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public readonly partial struct RenderBundleEncoderImpl : IEquatable<RenderBundleEncoderImpl>
        {
            private readonly IntPtr _handle;
            
            public RenderBundleEncoderImpl(IntPtr handle) => _handle = handle;
            
            public IntPtr Handle => _handle;
            
            public bool Equals(RenderBundleEncoderImpl other) => _handle.Equals(other._handle);
            
            public override bool Equals(object obj) => obj is RenderBundleEncoderImpl other && Equals(other);
            
            public override int GetHashCode() => _handle.GetHashCode();
            
            public override string ToString() => "0x" + (IntPtr.Size == 8 ? _handle.ToString("X16") : _handle.ToString("X8"));
            
            public static bool operator ==(RenderBundleEncoderImpl left, RenderBundleEncoderImpl right) => left.Equals(right);
            
            public static bool operator !=(RenderBundleEncoderImpl left, RenderBundleEncoderImpl right) => !left.Equals(right);
        }
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public readonly partial struct RenderPassEncoderImpl : IEquatable<RenderPassEncoderImpl>
        {
            private readonly IntPtr _handle;
            
            public RenderPassEncoderImpl(IntPtr handle) => _handle = handle;
            
            public IntPtr Handle => _handle;
            
            public bool Equals(RenderPassEncoderImpl other) => _handle.Equals(other._handle);
            
            public override bool Equals(object obj) => obj is RenderPassEncoderImpl other && Equals(other);
            
            public override int GetHashCode() => _handle.GetHashCode();
            
            public override string ToString() => "0x" + (IntPtr.Size == 8 ? _handle.ToString("X16") : _handle.ToString("X8"));
            
            public static bool operator ==(RenderPassEncoderImpl left, RenderPassEncoderImpl right) => left.Equals(right);
            
            public static bool operator !=(RenderPassEncoderImpl left, RenderPassEncoderImpl right) => !left.Equals(right);
        }
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public readonly partial struct RenderPipelineImpl : IEquatable<RenderPipelineImpl>
        {
            private readonly IntPtr _handle;
            
            public RenderPipelineImpl(IntPtr handle) => _handle = handle;
            
            public IntPtr Handle => _handle;
            
            public bool Equals(RenderPipelineImpl other) => _handle.Equals(other._handle);
            
            public override bool Equals(object obj) => obj is RenderPipelineImpl other && Equals(other);
            
            public override int GetHashCode() => _handle.GetHashCode();
            
            public override string ToString() => "0x" + (IntPtr.Size == 8 ? _handle.ToString("X16") : _handle.ToString("X8"));
            
            public static bool operator ==(RenderPipelineImpl left, RenderPipelineImpl right) => left.Equals(right);
            
            public static bool operator !=(RenderPipelineImpl left, RenderPipelineImpl right) => !left.Equals(right);
        }
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public readonly partial struct SamplerImpl : IEquatable<SamplerImpl>
        {
            private readonly IntPtr _handle;
            
            public SamplerImpl(IntPtr handle) => _handle = handle;
            
            public IntPtr Handle => _handle;
            
            public bool Equals(SamplerImpl other) => _handle.Equals(other._handle);
            
            public override bool Equals(object obj) => obj is SamplerImpl other && Equals(other);
            
            public override int GetHashCode() => _handle.GetHashCode();
            
            public override string ToString() => "0x" + (IntPtr.Size == 8 ? _handle.ToString("X16") : _handle.ToString("X8"));
            
            public static bool operator ==(SamplerImpl left, SamplerImpl right) => left.Equals(right);
            
            public static bool operator !=(SamplerImpl left, SamplerImpl right) => !left.Equals(right);
        }
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public readonly partial struct ShaderModuleImpl : IEquatable<ShaderModuleImpl>
        {
            private readonly IntPtr _handle;
            
            public ShaderModuleImpl(IntPtr handle) => _handle = handle;
            
            public IntPtr Handle => _handle;
            
            public bool Equals(ShaderModuleImpl other) => _handle.Equals(other._handle);
            
            public override bool Equals(object obj) => obj is ShaderModuleImpl other && Equals(other);
            
            public override int GetHashCode() => _handle.GetHashCode();
            
            public override string ToString() => "0x" + (IntPtr.Size == 8 ? _handle.ToString("X16") : _handle.ToString("X8"));
            
            public static bool operator ==(ShaderModuleImpl left, ShaderModuleImpl right) => left.Equals(right);
            
            public static bool operator !=(ShaderModuleImpl left, ShaderModuleImpl right) => !left.Equals(right);
        }
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public readonly partial struct SurfaceImpl : IEquatable<SurfaceImpl>
        {
            private readonly IntPtr _handle;
            
            public SurfaceImpl(IntPtr handle) => _handle = handle;
            
            public IntPtr Handle => _handle;
            
            public bool Equals(SurfaceImpl other) => _handle.Equals(other._handle);
            
            public override bool Equals(object obj) => obj is SurfaceImpl other && Equals(other);
            
            public override int GetHashCode() => _handle.GetHashCode();
            
            public override string ToString() => "0x" + (IntPtr.Size == 8 ? _handle.ToString("X16") : _handle.ToString("X8"));
            
            public static bool operator ==(SurfaceImpl left, SurfaceImpl right) => left.Equals(right);
            
            public static bool operator !=(SurfaceImpl left, SurfaceImpl right) => !left.Equals(right);
        }
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public readonly partial struct SwapChainImpl : IEquatable<SwapChainImpl>
        {
            private readonly IntPtr _handle;
            
            public SwapChainImpl(IntPtr handle) => _handle = handle;
            
            public IntPtr Handle => _handle;
            
            public bool Equals(SwapChainImpl other) => _handle.Equals(other._handle);
            
            public override bool Equals(object obj) => obj is SwapChainImpl other && Equals(other);
            
            public override int GetHashCode() => _handle.GetHashCode();
            
            public override string ToString() => "0x" + (IntPtr.Size == 8 ? _handle.ToString("X16") : _handle.ToString("X8"));
            
            public static bool operator ==(SwapChainImpl left, SwapChainImpl right) => left.Equals(right);
            
            public static bool operator !=(SwapChainImpl left, SwapChainImpl right) => !left.Equals(right);
        }
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public readonly partial struct TextureImpl : IEquatable<TextureImpl>
        {
            private readonly IntPtr _handle;
            
            public TextureImpl(IntPtr handle) => _handle = handle;
            
            public IntPtr Handle => _handle;
            
            public bool Equals(TextureImpl other) => _handle.Equals(other._handle);
            
            public override bool Equals(object obj) => obj is TextureImpl other && Equals(other);
            
            public override int GetHashCode() => _handle.GetHashCode();
            
            public override string ToString() => "0x" + (IntPtr.Size == 8 ? _handle.ToString("X16") : _handle.ToString("X8"));
            
            public static bool operator ==(TextureImpl left, TextureImpl right) => left.Equals(right);
            
            public static bool operator !=(TextureImpl left, TextureImpl right) => !left.Equals(right);
        }
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public readonly partial struct TextureViewImpl : IEquatable<TextureViewImpl>
        {
            private readonly IntPtr _handle;
            
            public TextureViewImpl(IntPtr handle) => _handle = handle;
            
            public IntPtr Handle => _handle;
            
            public bool Equals(TextureViewImpl other) => _handle.Equals(other._handle);
            
            public override bool Equals(object obj) => obj is TextureViewImpl other && Equals(other);
            
            public override int GetHashCode() => _handle.GetHashCode();
            
            public override string ToString() => "0x" + (IntPtr.Size == 8 ? _handle.ToString("X16") : _handle.ToString("X8"));
            
            public static bool operator ==(TextureViewImpl left, TextureViewImpl right) => left.Equals(right);
            
            public static bool operator !=(TextureViewImpl left, TextureViewImpl right) => !left.Equals(right);
        }
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public partial struct ChainedStruct
        {
            public IntPtr next;
            
            public Wgpu.SType sType;
        }
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public partial struct ChainedStructOut
        {
            public IntPtr next;
            
            public Wgpu.SType sType;
        }
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public partial struct AdapterProperties
        {
            public IntPtr nextInChain;
            
            public uint vendorID;
            
            public uint deviceID;
            
            [MarshalAs(UnmanagedType.LPStr)]
            public string name;
            
            [MarshalAs(UnmanagedType.LPStr)]
            public string driverDescription;
            
            public Wgpu.AdapterType adapterType;
            
            public Wgpu.BackendType backendType;
        }
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public partial struct BindGroupEntry
        {
            public IntPtr nextInChain;
            
            public uint binding;
            
            public Wgpu.BufferImpl buffer;
            
            public ulong offset;
            
            public ulong size;
            
            public Wgpu.SamplerImpl sampler;
            
            public Wgpu.TextureViewImpl textureView;
        }
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public partial struct BlendComponent
        {
            public Wgpu.BlendOperation operation;
            
            public Wgpu.BlendFactor srcFactor;
            
            public Wgpu.BlendFactor dstFactor;
        }
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public partial struct BufferBindingLayout
        {
            public IntPtr nextInChain;
            
            public Wgpu.BufferBindingType type;
            
            [MarshalAs(UnmanagedType.U1)]
            public bool hasDynamicOffset;
            
            public ulong minBindingSize;
        }
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public partial struct BufferDescriptor
        {
            public IntPtr nextInChain;
            
            [MarshalAs(UnmanagedType.LPStr)]
            public string label;
            
            public uint usage;
            
            public ulong size;
            
            [MarshalAs(UnmanagedType.U1)]
            public bool mappedAtCreation;
        }
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public partial struct Color
        {
            public double r;
            
            public double g;
            
            public double b;
            
            public double a;
        }
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public partial struct CommandBufferDescriptor
        {
            public IntPtr nextInChain;
            
            [MarshalAs(UnmanagedType.LPStr)]
            public string label;
        }
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public partial struct CommandEncoderDescriptor
        {
            public IntPtr nextInChain;
            
            [MarshalAs(UnmanagedType.LPStr)]
            public string label;
        }
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public partial struct CompilationMessage
        {
            public IntPtr nextInChain;
            
            [MarshalAs(UnmanagedType.LPStr)]
            public string message;
            
            public Wgpu.CompilationMessageType type;
            
            public ulong lineNum;
            
            public ulong linePos;
            
            public ulong offset;
            
            public ulong length;
        }
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public partial struct ComputePassDescriptor
        {
            public IntPtr nextInChain;
            
            [MarshalAs(UnmanagedType.LPStr)]
            public string label;
        }
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public partial struct ConstantEntry
        {
            public IntPtr nextInChain;
            
            [MarshalAs(UnmanagedType.LPStr)]
            public string key;
            
            public double value;
        }
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public partial struct Extent3D
        {
            public uint width;
            
            public uint height;
            
            public uint depthOrArrayLayers;
        }
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public partial struct InstanceDescriptor
        {
            public IntPtr nextInChain;
        }
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public partial struct Limits
        {
            public uint maxTextureDimension1D;
            
            public uint maxTextureDimension2D;
            
            public uint maxTextureDimension3D;
            
            public uint maxTextureArrayLayers;
            
            public uint maxBindGroups;
            
            public uint maxDynamicUniformBuffersPerPipelineLayout;
            
            public uint maxDynamicStorageBuffersPerPipelineLayout;
            
            public uint maxSampledTexturesPerShaderStage;
            
            public uint maxSamplersPerShaderStage;
            
            public uint maxStorageBuffersPerShaderStage;
            
            public uint maxStorageTexturesPerShaderStage;
            
            public uint maxUniformBuffersPerShaderStage;
            
            public ulong maxUniformBufferBindingSize;
            
            public ulong maxStorageBufferBindingSize;
            
            public uint minUniformBufferOffsetAlignment;
            
            public uint minStorageBufferOffsetAlignment;
            
            public uint maxVertexBuffers;
            
            public uint maxVertexAttributes;
            
            public uint maxVertexBufferArrayStride;
            
            public uint maxInterStageShaderComponents;
            
            public uint maxComputeWorkgroupStorageSize;
            
            public uint maxComputeInvocationsPerWorkgroup;
            
            public uint maxComputeWorkgroupSizeX;
            
            public uint maxComputeWorkgroupSizeY;
            
            public uint maxComputeWorkgroupSizeZ;
            
            public uint maxComputeWorkgroupsPerDimension;
        }
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public partial struct MultisampleState
        {
            public IntPtr nextInChain;
            
            public uint count;
            
            public uint mask;
            
            [MarshalAs(UnmanagedType.U1)]
            public bool alphaToCoverageEnabled;
        }
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public partial struct Origin3D
        {
            public uint x;
            
            public uint y;
            
            public uint z;
        }
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public partial struct PipelineLayoutDescriptor
        {
            public IntPtr nextInChain;
            
            [MarshalAs(UnmanagedType.LPStr)]
            public string label;
            
            public uint bindGroupLayoutCount;
            
            public IntPtr bindGroupLayouts;
        }
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public partial struct PrimitiveDepthClampingState
        {
            public Wgpu.ChainedStruct chain;
            
            [MarshalAs(UnmanagedType.U1)]
            public bool clampDepth;
        }
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public partial struct PrimitiveState
        {
            public IntPtr nextInChain;
            
            public Wgpu.PrimitiveTopology topology;
            
            public Wgpu.IndexFormat stripIndexFormat;
            
            public Wgpu.FrontFace frontFace;
            
            public Wgpu.CullMode cullMode;
        }
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public partial struct QuerySetDescriptor
        {
            public IntPtr nextInChain;
            
            [MarshalAs(UnmanagedType.LPStr)]
            public string label;
            
            public Wgpu.QueryType type;
            
            public uint count;
            
            public IntPtr pipelineStatistics;
            
            public uint pipelineStatisticsCount;
        }
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public partial struct RenderBundleDescriptor
        {
            public IntPtr nextInChain;
            
            [MarshalAs(UnmanagedType.LPStr)]
            public string label;
        }
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public partial struct RenderBundleEncoderDescriptor
        {
            public IntPtr nextInChain;
            
            [MarshalAs(UnmanagedType.LPStr)]
            public string label;
            
            public uint colorFormatsCount;
            
            public IntPtr colorFormats;
            
            public Wgpu.TextureFormat depthStencilFormat;
            
            public uint sampleCount;
        }
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public partial struct RenderPassDepthStencilAttachment
        {
            public Wgpu.TextureViewImpl view;
            
            public Wgpu.LoadOp depthLoadOp;
            
            public Wgpu.StoreOp depthStoreOp;
            
            public float clearDepth;
            
            [MarshalAs(UnmanagedType.U1)]
            public bool depthReadOnly;
            
            public Wgpu.LoadOp stencilLoadOp;
            
            public Wgpu.StoreOp stencilStoreOp;
            
            public uint clearStencil;
            
            [MarshalAs(UnmanagedType.U1)]
            public bool stencilReadOnly;
        }
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public partial struct RequestAdapterOptions
        {
            public IntPtr nextInChain;
            
            public Wgpu.SurfaceImpl compatibleSurface;
            
            public Wgpu.PowerPreference powerPreference;
            
            [MarshalAs(UnmanagedType.U1)]
            public bool forceFallbackAdapter;
        }
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public partial struct SamplerBindingLayout
        {
            public IntPtr nextInChain;
            
            public Wgpu.SamplerBindingType type;
        }
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public partial struct SamplerDescriptor
        {
            public IntPtr nextInChain;
            
            [MarshalAs(UnmanagedType.LPStr)]
            public string label;
            
            public Wgpu.AddressMode addressModeU;
            
            public Wgpu.AddressMode addressModeV;
            
            public Wgpu.AddressMode addressModeW;
            
            public Wgpu.FilterMode magFilter;
            
            public Wgpu.FilterMode minFilter;
            
            public Wgpu.FilterMode mipmapFilter;
            
            public float lodMinClamp;
            
            public float lodMaxClamp;
            
            public Wgpu.CompareFunction compare;
            
            public ushort maxAnisotropy;
        }
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public partial struct ShaderModuleDescriptor
        {
            public IntPtr nextInChain;
            
            [MarshalAs(UnmanagedType.LPStr)]
            public string label;
        }
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public partial struct ShaderModuleSPIRVDescriptor
        {
            public Wgpu.ChainedStruct chain;
            
            public uint codeSize;
            
            public IntPtr code;
        }
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public partial struct ShaderModuleWGSLDescriptor
        {
            public Wgpu.ChainedStruct chain;
            
            [MarshalAs(UnmanagedType.LPStr)]
            public string source;
        }
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public partial struct StencilFaceState
        {
            public Wgpu.CompareFunction compare;
            
            public Wgpu.StencilOperation failOp;
            
            public Wgpu.StencilOperation depthFailOp;
            
            public Wgpu.StencilOperation passOp;
        }
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public partial struct StorageTextureBindingLayout
        {
            public IntPtr nextInChain;
            
            public Wgpu.StorageTextureAccess access;
            
            public Wgpu.TextureFormat format;
            
            public Wgpu.TextureViewDimension viewDimension;
        }
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public partial struct SurfaceDescriptor
        {
            public IntPtr nextInChain;
            
            [MarshalAs(UnmanagedType.LPStr)]
            public string label;
        }
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public partial struct SurfaceDescriptorFromCanvasHTMLSelector
        {
            public Wgpu.ChainedStruct chain;
            
            [MarshalAs(UnmanagedType.LPStr)]
            public string selector;
        }
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public partial struct SurfaceDescriptorFromMetalLayer
        {
            public Wgpu.ChainedStruct chain;
            
            public IntPtr layer;
        }
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public partial struct SurfaceDescriptorFromWindowsHWND
        {
            public Wgpu.ChainedStruct chain;
            
            public IntPtr hinstance;
            
            public IntPtr hwnd;
        }
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public partial struct SurfaceDescriptorFromXlib
        {
            public Wgpu.ChainedStruct chain;
            
            public IntPtr display;
            
            public uint window;
        }
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public partial struct SwapChainDescriptor
        {
            public IntPtr nextInChain;
            
            [MarshalAs(UnmanagedType.LPStr)]
            public string label;
            
            public uint usage;
            
            public Wgpu.TextureFormat format;
            
            public uint width;
            
            public uint height;
            
            public Wgpu.PresentMode presentMode;
        }
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public partial struct TextureBindingLayout
        {
            public IntPtr nextInChain;
            
            public Wgpu.TextureSampleType sampleType;
            
            public Wgpu.TextureViewDimension viewDimension;
            
            [MarshalAs(UnmanagedType.U1)]
            public bool multisampled;
        }
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public partial struct TextureDataLayout
        {
            public IntPtr nextInChain;
            
            public ulong offset;
            
            public uint bytesPerRow;
            
            public uint rowsPerImage;
        }
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public partial struct TextureViewDescriptor
        {
            public IntPtr nextInChain;
            
            [MarshalAs(UnmanagedType.LPStr)]
            public string label;
            
            public Wgpu.TextureFormat format;
            
            public Wgpu.TextureViewDimension dimension;
            
            public uint baseMipLevel;
            
            public uint mipLevelCount;
            
            public uint baseArrayLayer;
            
            public uint arrayLayerCount;
            
            public Wgpu.TextureAspect aspect;
        }
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public partial struct VertexAttribute
        {
            public Wgpu.VertexFormat format;
            
            public ulong offset;
            
            public uint shaderLocation;
        }
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public partial struct BindGroupDescriptor
        {
            public IntPtr nextInChain;
            
            [MarshalAs(UnmanagedType.LPStr)]
            public string label;
            
            public Wgpu.BindGroupLayoutImpl layout;
            
            public uint entryCount;
            
            public IntPtr entries;
        }
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public partial struct BindGroupLayoutEntry
        {
            public IntPtr nextInChain;
            
            public uint binding;
            
            public uint visibility;
            
            public Wgpu.BufferBindingLayout buffer;
            
            public Wgpu.SamplerBindingLayout sampler;
            
            public Wgpu.TextureBindingLayout texture;
            
            public Wgpu.StorageTextureBindingLayout storageTexture;
        }
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public partial struct BlendState
        {
            public Wgpu.BlendComponent color;
            
            public Wgpu.BlendComponent alpha;
        }
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public partial struct CompilationInfo
        {
            public IntPtr nextInChain;
            
            public uint messageCount;
            
            public IntPtr messages;
        }
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public partial struct DepthStencilState
        {
            public IntPtr nextInChain;
            
            public Wgpu.TextureFormat format;
            
            [MarshalAs(UnmanagedType.U1)]
            public bool depthWriteEnabled;
            
            public Wgpu.CompareFunction depthCompare;
            
            public Wgpu.StencilFaceState stencilFront;
            
            public Wgpu.StencilFaceState stencilBack;
            
            public uint stencilReadMask;
            
            public uint stencilWriteMask;
            
            public int depthBias;
            
            public float depthBiasSlopeScale;
            
            public float depthBiasClamp;
        }
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public partial struct ImageCopyBuffer
        {
            public IntPtr nextInChain;
            
            public Wgpu.TextureDataLayout layout;
            
            public Wgpu.BufferImpl buffer;
        }
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public partial struct ImageCopyTexture
        {
            public IntPtr nextInChain;
            
            public Wgpu.TextureImpl texture;
            
            public uint mipLevel;
            
            public Wgpu.Origin3D origin;
            
            public Wgpu.TextureAspect aspect;
        }
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public partial struct ProgrammableStageDescriptor
        {
            public IntPtr nextInChain;
            
            public Wgpu.ShaderModuleImpl module;
            
            [MarshalAs(UnmanagedType.LPStr)]
            public string entryPoint;
            
            public uint constantCount;
            
            public IntPtr constants;
        }
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public partial struct RenderPassColorAttachment
        {
            public Wgpu.TextureViewImpl view;
            
            public Wgpu.TextureViewImpl resolveTarget;
            
            public Wgpu.LoadOp loadOp;
            
            public Wgpu.StoreOp storeOp;
            
            public Wgpu.Color clearColor;
        }
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public partial struct RequiredLimits
        {
            public IntPtr nextInChain;
            
            public Wgpu.Limits limits;
        }
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public partial struct SupportedLimits
        {
            public IntPtr nextInChain;
            
            public Wgpu.Limits limits;
        }
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public partial struct TextureDescriptor
        {
            public IntPtr nextInChain;
            
            [MarshalAs(UnmanagedType.LPStr)]
            public string label;
            
            public uint usage;
            
            public Wgpu.TextureDimension dimension;
            
            public Wgpu.Extent3D size;
            
            public Wgpu.TextureFormat format;
            
            public uint mipLevelCount;
            
            public uint sampleCount;
        }
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public partial struct VertexBufferLayout
        {
            public ulong arrayStride;
            
            public Wgpu.VertexStepMode stepMode;
            
            public uint attributeCount;
            
            public IntPtr attributes;
        }
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public partial struct BindGroupLayoutDescriptor
        {
            public IntPtr nextInChain;
            
            [MarshalAs(UnmanagedType.LPStr)]
            public string label;
            
            public uint entryCount;
            
            public IntPtr entries;
        }
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public partial struct ColorTargetState
        {
            public IntPtr nextInChain;
            
            public Wgpu.TextureFormat format;
            
            public IntPtr blend;
            
            public uint writeMask;
        }
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public partial struct ComputePipelineDescriptor
        {
            public IntPtr nextInChain;
            
            [MarshalAs(UnmanagedType.LPStr)]
            public string label;
            
            public Wgpu.PipelineLayoutImpl layout;
            
            public Wgpu.ProgrammableStageDescriptor compute;
        }
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public partial struct DeviceDescriptor
        {
            public IntPtr nextInChain;
            
            public uint requiredFeaturesCount;
            
            public IntPtr requiredFeatures;
            
            public IntPtr requiredLimits;
        }
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public partial struct RenderPassDescriptor
        {
            public IntPtr nextInChain;
            
            [MarshalAs(UnmanagedType.LPStr)]
            public string label;
            
            public uint colorAttachmentCount;
            
            public IntPtr colorAttachments;
            
            public IntPtr depthStencilAttachment;
            
            public Wgpu.QuerySetImpl occlusionQuerySet;
        }
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public partial struct VertexState
        {
            public IntPtr nextInChain;
            
            public Wgpu.ShaderModuleImpl module;
            
            [MarshalAs(UnmanagedType.LPStr)]
            public string entryPoint;
            
            public uint constantCount;
            
            public IntPtr constants;
            
            public uint bufferCount;
            
            public IntPtr buffers;
        }
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public partial struct FragmentState
        {
            public IntPtr nextInChain;
            
            public Wgpu.ShaderModuleImpl module;
            
            [MarshalAs(UnmanagedType.LPStr)]
            public string entryPoint;
            
            public uint constantCount;
            
            public IntPtr constants;
            
            public uint targetCount;
            
            public IntPtr targets;
        }
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public partial struct RenderPipelineDescriptor
        {
            public IntPtr nextInChain;
            
            [MarshalAs(UnmanagedType.LPStr)]
            public string label;
            
            public Wgpu.PipelineLayoutImpl layout;
            
            public Wgpu.VertexState vertex;
            
            public Wgpu.PrimitiveState primitive;
            
            public IntPtr depthStencil;
            
            public Wgpu.MultisampleState multisample;
            
            public IntPtr fragment;
        }
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public partial struct AdapterExtras
        {
            public Wgpu.ChainedStruct chain;
            
            public Wgpu.BackendType backend;
        }
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public partial struct DeviceExtras
        {
            public Wgpu.ChainedStruct chain;
            
            public Wgpu.NativeFeature nativeFeatures;
            
            [MarshalAs(UnmanagedType.LPStr)]
            public string label;
            
            [MarshalAs(UnmanagedType.LPStr)]
            public string tracePath;
        }
        
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate void BufferMapCallback(Wgpu.BufferMapAsyncStatus status, IntPtr userdata);
        
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate void CreateComputePipelineAsyncCallback(Wgpu.CreatePipelineAsyncStatus status, Wgpu.ComputePipelineImpl pipeline, [MarshalAs(UnmanagedType.LPStr)] string message, IntPtr userdata);
        
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate void CreateRenderPipelineAsyncCallback(Wgpu.CreatePipelineAsyncStatus status, Wgpu.RenderPipelineImpl pipeline, [MarshalAs(UnmanagedType.LPStr)] string message, IntPtr userdata);
        
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate void DeviceLostCallback(Wgpu.DeviceLostReason reason, [MarshalAs(UnmanagedType.LPStr)] string message, IntPtr userdata);
        
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate void ErrorCallback(Wgpu.ErrorType type, [MarshalAs(UnmanagedType.LPStr)] string message, IntPtr userdata);
        
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate void QueueWorkDoneCallback(Wgpu.QueueWorkDoneStatus status, IntPtr userdata);
        
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate void RequestAdapterCallback(Wgpu.RequestAdapterStatus status, Wgpu.AdapterImpl adapter, [MarshalAs(UnmanagedType.LPStr)] string message, IntPtr userdata);
        
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate void RequestDeviceCallback(Wgpu.RequestDeviceStatus status, Wgpu.DeviceImpl device, [MarshalAs(UnmanagedType.LPStr)] string message, IntPtr userdata);
        
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate void Proc();
        
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate Wgpu.InstanceImpl ProcCreateInstance(in Wgpu.InstanceDescriptor descriptor);
        
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate Wgpu.Proc ProcGetProcAddress(Wgpu.DeviceImpl device, [MarshalAs(UnmanagedType.LPStr)] string procName);
        
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        [return:MarshalAs(UnmanagedType.U1)]
        public delegate bool ProcAdapterGetLimits(Wgpu.AdapterImpl adapter, ref Wgpu.SupportedLimits limits);
        
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate void ProcAdapterGetProperties(Wgpu.AdapterImpl adapter, ref Wgpu.AdapterProperties properties);
        
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        [return:MarshalAs(UnmanagedType.U1)]
        public delegate bool ProcAdapterHasFeature(Wgpu.AdapterImpl adapter, Wgpu.FeatureName feature);
        
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate void ProcAdapterRequestDevice(Wgpu.AdapterImpl adapter, in Wgpu.DeviceDescriptor descriptor, Wgpu.RequestDeviceCallback callback, IntPtr userdata);
        
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate void ProcBufferDestroy(Wgpu.BufferImpl buffer);
        
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate IntPtr ProcBufferGetConstMappedRange(Wgpu.BufferImpl buffer, ulong offset, ulong size);
        
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate IntPtr ProcBufferGetMappedRange(Wgpu.BufferImpl buffer, ulong offset, ulong size);
        
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate void ProcBufferMapAsync(Wgpu.BufferImpl buffer, uint mode, ulong offset, ulong size, Wgpu.BufferMapCallback callback, IntPtr userdata);
        
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate void ProcBufferUnmap(Wgpu.BufferImpl buffer);
        
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate Wgpu.ComputePassEncoderImpl ProcCommandEncoderBeginComputePass(Wgpu.CommandEncoderImpl commandEncoder, in Wgpu.ComputePassDescriptor descriptor);
        
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate Wgpu.RenderPassEncoderImpl ProcCommandEncoderBeginRenderPass(Wgpu.CommandEncoderImpl commandEncoder, in Wgpu.RenderPassDescriptor descriptor);
        
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate void ProcCommandEncoderCopyBufferToBuffer(Wgpu.CommandEncoderImpl commandEncoder, Wgpu.BufferImpl source, ulong sourceOffset, Wgpu.BufferImpl destination, ulong destinationOffset, ulong size);
        
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate void ProcCommandEncoderCopyBufferToTexture(Wgpu.CommandEncoderImpl commandEncoder, in Wgpu.ImageCopyBuffer source, in Wgpu.ImageCopyTexture destination, in Wgpu.Extent3D copySize);
        
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate void ProcCommandEncoderCopyTextureToBuffer(Wgpu.CommandEncoderImpl commandEncoder, in Wgpu.ImageCopyTexture source, in Wgpu.ImageCopyBuffer destination, in Wgpu.Extent3D copySize);
        
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate void ProcCommandEncoderCopyTextureToTexture(Wgpu.CommandEncoderImpl commandEncoder, in Wgpu.ImageCopyTexture source, in Wgpu.ImageCopyTexture destination, in Wgpu.Extent3D copySize);
        
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate Wgpu.CommandBufferImpl ProcCommandEncoderFinish(Wgpu.CommandEncoderImpl commandEncoder, in Wgpu.CommandBufferDescriptor descriptor);
        
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate void ProcCommandEncoderInsertDebugMarker(Wgpu.CommandEncoderImpl commandEncoder, [MarshalAs(UnmanagedType.LPStr)] string markerLabel);
        
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate void ProcCommandEncoderPopDebugGroup(Wgpu.CommandEncoderImpl commandEncoder);
        
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate void ProcCommandEncoderPushDebugGroup(Wgpu.CommandEncoderImpl commandEncoder, [MarshalAs(UnmanagedType.LPStr)] string groupLabel);
        
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate void ProcCommandEncoderResolveQuerySet(Wgpu.CommandEncoderImpl commandEncoder, Wgpu.QuerySetImpl querySet, uint firstQuery, uint queryCount, Wgpu.BufferImpl destination, ulong destinationOffset);
        
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate void ProcCommandEncoderWriteTimestamp(Wgpu.CommandEncoderImpl commandEncoder, Wgpu.QuerySetImpl querySet, uint queryIndex);
        
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate void ProcComputePassEncoderBeginPipelineStatisticsQuery(Wgpu.ComputePassEncoderImpl computePassEncoder, Wgpu.QuerySetImpl querySet, uint queryIndex);
        
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate void ProcComputePassEncoderDispatch(Wgpu.ComputePassEncoderImpl computePassEncoder, uint x, uint y, uint z);
        
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate void ProcComputePassEncoderDispatchIndirect(Wgpu.ComputePassEncoderImpl computePassEncoder, Wgpu.BufferImpl indirectBuffer, ulong indirectOffset);
        
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate void ProcComputePassEncoderEndPass(Wgpu.ComputePassEncoderImpl computePassEncoder);
        
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate void ProcComputePassEncoderEndPipelineStatisticsQuery(Wgpu.ComputePassEncoderImpl computePassEncoder);
        
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate void ProcComputePassEncoderInsertDebugMarker(Wgpu.ComputePassEncoderImpl computePassEncoder, [MarshalAs(UnmanagedType.LPStr)] string markerLabel);
        
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate void ProcComputePassEncoderPopDebugGroup(Wgpu.ComputePassEncoderImpl computePassEncoder);
        
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate void ProcComputePassEncoderPushDebugGroup(Wgpu.ComputePassEncoderImpl computePassEncoder, [MarshalAs(UnmanagedType.LPStr)] string groupLabel);
        
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate void ProcComputePassEncoderSetBindGroup(Wgpu.ComputePassEncoderImpl computePassEncoder, uint groupIndex, Wgpu.BindGroupImpl group, uint dynamicOffsetCount, ref uint dynamicOffsets);
        
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate void ProcComputePassEncoderSetPipeline(Wgpu.ComputePassEncoderImpl computePassEncoder, Wgpu.ComputePipelineImpl pipeline);
        
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate void ProcComputePassEncoderWriteTimestamp(Wgpu.ComputePassEncoderImpl computePassEncoder, Wgpu.QuerySetImpl querySet, uint queryIndex);
        
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate Wgpu.BindGroupLayoutImpl ProcComputePipelineGetBindGroupLayout(Wgpu.ComputePipelineImpl computePipeline, uint groupIndex);
        
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate void ProcComputePipelineSetLabel(Wgpu.ComputePipelineImpl computePipeline, [MarshalAs(UnmanagedType.LPStr)] string label);
        
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate Wgpu.BindGroupImpl ProcDeviceCreateBindGroup(Wgpu.DeviceImpl device, in Wgpu.BindGroupDescriptor descriptor);
        
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate Wgpu.BindGroupLayoutImpl ProcDeviceCreateBindGroupLayout(Wgpu.DeviceImpl device, in Wgpu.BindGroupLayoutDescriptor descriptor);
        
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate Wgpu.BufferImpl ProcDeviceCreateBuffer(Wgpu.DeviceImpl device, in Wgpu.BufferDescriptor descriptor);
        
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate Wgpu.CommandEncoderImpl ProcDeviceCreateCommandEncoder(Wgpu.DeviceImpl device, in Wgpu.CommandEncoderDescriptor descriptor);
        
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate Wgpu.ComputePipelineImpl ProcDeviceCreateComputePipeline(Wgpu.DeviceImpl device, in Wgpu.ComputePipelineDescriptor descriptor);
        
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate void ProcDeviceCreateComputePipelineAsync(Wgpu.DeviceImpl device, in Wgpu.ComputePipelineDescriptor descriptor, Wgpu.CreateComputePipelineAsyncCallback callback, IntPtr userdata);
        
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate Wgpu.PipelineLayoutImpl ProcDeviceCreatePipelineLayout(Wgpu.DeviceImpl device, in Wgpu.PipelineLayoutDescriptor descriptor);
        
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate Wgpu.QuerySetImpl ProcDeviceCreateQuerySet(Wgpu.DeviceImpl device, in Wgpu.QuerySetDescriptor descriptor);
        
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate Wgpu.RenderBundleEncoderImpl ProcDeviceCreateRenderBundleEncoder(Wgpu.DeviceImpl device, in Wgpu.RenderBundleEncoderDescriptor descriptor);
        
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate Wgpu.RenderPipelineImpl ProcDeviceCreateRenderPipeline(Wgpu.DeviceImpl device, in Wgpu.RenderPipelineDescriptor descriptor);
        
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate void ProcDeviceCreateRenderPipelineAsync(Wgpu.DeviceImpl device, in Wgpu.RenderPipelineDescriptor descriptor, Wgpu.CreateRenderPipelineAsyncCallback callback, IntPtr userdata);
        
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate Wgpu.SamplerImpl ProcDeviceCreateSampler(Wgpu.DeviceImpl device, in Wgpu.SamplerDescriptor descriptor);
        
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate Wgpu.ShaderModuleImpl ProcDeviceCreateShaderModule(Wgpu.DeviceImpl device, in Wgpu.ShaderModuleDescriptor descriptor);
        
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate Wgpu.SwapChainImpl ProcDeviceCreateSwapChain(Wgpu.DeviceImpl device, Wgpu.SurfaceImpl surface, in Wgpu.SwapChainDescriptor descriptor);
        
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate Wgpu.TextureImpl ProcDeviceCreateTexture(Wgpu.DeviceImpl device, in Wgpu.TextureDescriptor descriptor);
        
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate void ProcDeviceDestroy(Wgpu.DeviceImpl device);
        
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        [return:MarshalAs(UnmanagedType.U1)]
        public delegate bool ProcDeviceGetLimits(Wgpu.DeviceImpl device, ref Wgpu.SupportedLimits limits);
        
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate Wgpu.QueueImpl ProcDeviceGetQueue(Wgpu.DeviceImpl device);
        
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        [return:MarshalAs(UnmanagedType.U1)]
        public delegate bool ProcDevicePopErrorScope(Wgpu.DeviceImpl device, Wgpu.ErrorCallback callback, IntPtr userdata);
        
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate void ProcDevicePushErrorScope(Wgpu.DeviceImpl device, Wgpu.ErrorFilter filter);
        
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate void ProcDeviceSetDeviceLostCallback(Wgpu.DeviceImpl device, Wgpu.DeviceLostCallback callback, IntPtr userdata);
        
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate void ProcDeviceSetUncapturedErrorCallback(Wgpu.DeviceImpl device, Wgpu.ErrorCallback callback, IntPtr userdata);
        
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate Wgpu.SurfaceImpl ProcInstanceCreateSurface(Wgpu.InstanceImpl instance, in Wgpu.SurfaceDescriptor descriptor);
        
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate void ProcInstanceProcessEvents(Wgpu.InstanceImpl instance);
        
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate void ProcInstanceRequestAdapter(Wgpu.InstanceImpl instance, in Wgpu.RequestAdapterOptions options, Wgpu.RequestAdapterCallback callback, IntPtr userdata);
        
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate void ProcQuerySetDestroy(Wgpu.QuerySetImpl querySet);
        
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate void ProcQueueOnSubmittedWorkDone(Wgpu.QueueImpl queue, ulong signalValue, Wgpu.QueueWorkDoneCallback callback, IntPtr userdata);
        
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate void ProcQueueSubmit(Wgpu.QueueImpl queue, uint commandCount, ref Wgpu.CommandBufferImpl commands);
        
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate void ProcQueueWriteBuffer(Wgpu.QueueImpl queue, Wgpu.BufferImpl buffer, ulong bufferOffset, IntPtr data, ulong size);
        
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate void ProcQueueWriteTexture(Wgpu.QueueImpl queue, in Wgpu.ImageCopyTexture destination, IntPtr data, ulong dataSize, in Wgpu.TextureDataLayout dataLayout, in Wgpu.Extent3D writeSize);
        
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate void ProcRenderBundleEncoderDraw(Wgpu.RenderBundleEncoderImpl renderBundleEncoder, uint vertexCount, uint instanceCount, uint firstVertex, uint firstInstance);
        
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate void ProcRenderBundleEncoderDrawIndexed(Wgpu.RenderBundleEncoderImpl renderBundleEncoder, uint indexCount, uint instanceCount, uint firstIndex, int baseVertex, uint firstInstance);
        
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate void ProcRenderBundleEncoderDrawIndexedIndirect(Wgpu.RenderBundleEncoderImpl renderBundleEncoder, Wgpu.BufferImpl indirectBuffer, ulong indirectOffset);
        
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate void ProcRenderBundleEncoderDrawIndirect(Wgpu.RenderBundleEncoderImpl renderBundleEncoder, Wgpu.BufferImpl indirectBuffer, ulong indirectOffset);
        
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate Wgpu.RenderBundleImpl ProcRenderBundleEncoderFinish(Wgpu.RenderBundleEncoderImpl renderBundleEncoder, in Wgpu.RenderBundleDescriptor descriptor);
        
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate void ProcRenderBundleEncoderInsertDebugMarker(Wgpu.RenderBundleEncoderImpl renderBundleEncoder, [MarshalAs(UnmanagedType.LPStr)] string markerLabel);
        
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate void ProcRenderBundleEncoderPopDebugGroup(Wgpu.RenderBundleEncoderImpl renderBundleEncoder);
        
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate void ProcRenderBundleEncoderPushDebugGroup(Wgpu.RenderBundleEncoderImpl renderBundleEncoder, [MarshalAs(UnmanagedType.LPStr)] string groupLabel);
        
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate void ProcRenderBundleEncoderSetBindGroup(Wgpu.RenderBundleEncoderImpl renderBundleEncoder, uint groupIndex, Wgpu.BindGroupImpl group, uint dynamicOffsetCount, ref uint dynamicOffsets);
        
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate void ProcRenderBundleEncoderSetIndexBuffer(Wgpu.RenderBundleEncoderImpl renderBundleEncoder, Wgpu.BufferImpl buffer, Wgpu.IndexFormat format, ulong offset, ulong size);
        
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate void ProcRenderBundleEncoderSetPipeline(Wgpu.RenderBundleEncoderImpl renderBundleEncoder, Wgpu.RenderPipelineImpl pipeline);
        
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate void ProcRenderBundleEncoderSetVertexBuffer(Wgpu.RenderBundleEncoderImpl renderBundleEncoder, uint slot, Wgpu.BufferImpl buffer, ulong offset, ulong size);
        
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate void ProcRenderPassEncoderBeginOcclusionQuery(Wgpu.RenderPassEncoderImpl renderPassEncoder, uint queryIndex);
        
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate void ProcRenderPassEncoderBeginPipelineStatisticsQuery(Wgpu.RenderPassEncoderImpl renderPassEncoder, Wgpu.QuerySetImpl querySet, uint queryIndex);
        
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate void ProcRenderPassEncoderDraw(Wgpu.RenderPassEncoderImpl renderPassEncoder, uint vertexCount, uint instanceCount, uint firstVertex, uint firstInstance);
        
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate void ProcRenderPassEncoderDrawIndexed(Wgpu.RenderPassEncoderImpl renderPassEncoder, uint indexCount, uint instanceCount, uint firstIndex, int baseVertex, uint firstInstance);
        
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate void ProcRenderPassEncoderDrawIndexedIndirect(Wgpu.RenderPassEncoderImpl renderPassEncoder, Wgpu.BufferImpl indirectBuffer, ulong indirectOffset);
        
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate void ProcRenderPassEncoderDrawIndirect(Wgpu.RenderPassEncoderImpl renderPassEncoder, Wgpu.BufferImpl indirectBuffer, ulong indirectOffset);
        
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate void ProcRenderPassEncoderEndOcclusionQuery(Wgpu.RenderPassEncoderImpl renderPassEncoder);
        
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate void ProcRenderPassEncoderEndPass(Wgpu.RenderPassEncoderImpl renderPassEncoder);
        
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate void ProcRenderPassEncoderEndPipelineStatisticsQuery(Wgpu.RenderPassEncoderImpl renderPassEncoder);
        
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate void ProcRenderPassEncoderExecuteBundles(Wgpu.RenderPassEncoderImpl renderPassEncoder, uint bundlesCount, ref Wgpu.RenderBundleImpl bundles);
        
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate void ProcRenderPassEncoderInsertDebugMarker(Wgpu.RenderPassEncoderImpl renderPassEncoder, [MarshalAs(UnmanagedType.LPStr)] string markerLabel);
        
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate void ProcRenderPassEncoderPopDebugGroup(Wgpu.RenderPassEncoderImpl renderPassEncoder);
        
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate void ProcRenderPassEncoderPushDebugGroup(Wgpu.RenderPassEncoderImpl renderPassEncoder, [MarshalAs(UnmanagedType.LPStr)] string groupLabel);
        
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate void ProcRenderPassEncoderSetBindGroup(Wgpu.RenderPassEncoderImpl renderPassEncoder, uint groupIndex, Wgpu.BindGroupImpl group, uint dynamicOffsetCount, ref uint dynamicOffsets);
        
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate void ProcRenderPassEncoderSetBlendConstant(Wgpu.RenderPassEncoderImpl renderPassEncoder, in Wgpu.Color color);
        
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate void ProcRenderPassEncoderSetIndexBuffer(Wgpu.RenderPassEncoderImpl renderPassEncoder, Wgpu.BufferImpl buffer, Wgpu.IndexFormat format, ulong offset, ulong size);
        
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate void ProcRenderPassEncoderSetPipeline(Wgpu.RenderPassEncoderImpl renderPassEncoder, Wgpu.RenderPipelineImpl pipeline);
        
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate void ProcRenderPassEncoderSetScissorRect(Wgpu.RenderPassEncoderImpl renderPassEncoder, uint x, uint y, uint width, uint height);
        
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate void ProcRenderPassEncoderSetStencilReference(Wgpu.RenderPassEncoderImpl renderPassEncoder, uint reference);
        
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate void ProcRenderPassEncoderSetVertexBuffer(Wgpu.RenderPassEncoderImpl renderPassEncoder, uint slot, Wgpu.BufferImpl buffer, ulong offset, ulong size);
        
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate void ProcRenderPassEncoderSetViewport(Wgpu.RenderPassEncoderImpl renderPassEncoder, float x, float y, float width, float height, float minDepth, float maxDepth);
        
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate void ProcRenderPassEncoderWriteTimestamp(Wgpu.RenderPassEncoderImpl renderPassEncoder, Wgpu.QuerySetImpl querySet, uint queryIndex);
        
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate Wgpu.BindGroupLayoutImpl ProcRenderPipelineGetBindGroupLayout(Wgpu.RenderPipelineImpl renderPipeline, uint groupIndex);
        
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate void ProcRenderPipelineSetLabel(Wgpu.RenderPipelineImpl renderPipeline, [MarshalAs(UnmanagedType.LPStr)] string label);
        
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate void ProcShaderModuleSetLabel(Wgpu.ShaderModuleImpl shaderModule, [MarshalAs(UnmanagedType.LPStr)] string label);
        
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate Wgpu.TextureFormat ProcSurfaceGetPreferredFormat(Wgpu.SurfaceImpl surface, Wgpu.AdapterImpl adapter);
        
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate Wgpu.TextureViewImpl ProcSwapChainGetCurrentTextureView(Wgpu.SwapChainImpl swapChain);
        
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate void ProcSwapChainPresent(Wgpu.SwapChainImpl swapChain);
        
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate Wgpu.TextureViewImpl ProcTextureCreateView(Wgpu.TextureImpl texture, in Wgpu.TextureViewDescriptor descriptor);
        
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate void ProcTextureDestroy(Wgpu.TextureImpl texture);
        
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate void LogCallback(Wgpu.LogLevel level, [MarshalAs(UnmanagedType.LPStr)] string msg);
        
        [DllImport("libwgpu", EntryPoint = "wgpuCreateInstance", CallingConvention = CallingConvention.Cdecl)]
        public static extern Wgpu.InstanceImpl CreateInstance(in Wgpu.InstanceDescriptor descriptor);
        
        [DllImport("libwgpu", EntryPoint = "wgpuGetProcAddress", CallingConvention = CallingConvention.Cdecl)]
        public static extern Wgpu.Proc GetProcAddress(Wgpu.DeviceImpl device, [MarshalAs(UnmanagedType.LPStr)] string procName);
        
        /// <summary>
        /// Methods of Adapter
        /// </summary>
        [DllImport("libwgpu", EntryPoint = "wgpuAdapterGetLimits", CallingConvention = CallingConvention.Cdecl)]
        [return:MarshalAs(UnmanagedType.U1)]
        public static extern bool AdapterGetLimits(Wgpu.AdapterImpl adapter, ref Wgpu.SupportedLimits limits);
        
        [DllImport("libwgpu", EntryPoint = "wgpuAdapterGetProperties", CallingConvention = CallingConvention.Cdecl)]
        public static extern void AdapterGetProperties(Wgpu.AdapterImpl adapter, ref Wgpu.AdapterProperties properties);
        
        [DllImport("libwgpu", EntryPoint = "wgpuAdapterHasFeature", CallingConvention = CallingConvention.Cdecl)]
        [return:MarshalAs(UnmanagedType.U1)]
        public static extern bool AdapterHasFeature(Wgpu.AdapterImpl adapter, Wgpu.FeatureName feature);
        
        [DllImport("libwgpu", EntryPoint = "wgpuAdapterRequestDevice", CallingConvention = CallingConvention.Cdecl)]
        public static extern void AdapterRequestDevice(Wgpu.AdapterImpl adapter, in Wgpu.DeviceDescriptor descriptor, Wgpu.RequestDeviceCallback callback, IntPtr userdata);
        
        /// <summary>
        /// Methods of Buffer
        /// </summary>
        [DllImport("libwgpu", EntryPoint = "wgpuBufferDestroy", CallingConvention = CallingConvention.Cdecl)]
        public static extern void BufferDestroy(Wgpu.BufferImpl buffer);
        
        [DllImport("libwgpu", EntryPoint = "wgpuBufferGetConstMappedRange", CallingConvention = CallingConvention.Cdecl)]
        public static extern IntPtr BufferGetConstMappedRange(Wgpu.BufferImpl buffer, ulong offset, ulong size);
        
        [DllImport("libwgpu", EntryPoint = "wgpuBufferGetMappedRange", CallingConvention = CallingConvention.Cdecl)]
        public static extern IntPtr BufferGetMappedRange(Wgpu.BufferImpl buffer, ulong offset, ulong size);
        
        [DllImport("libwgpu", EntryPoint = "wgpuBufferMapAsync", CallingConvention = CallingConvention.Cdecl)]
        public static extern void BufferMapAsync(Wgpu.BufferImpl buffer, uint mode, ulong offset, ulong size, Wgpu.BufferMapCallback callback, IntPtr userdata);
        
        [DllImport("libwgpu", EntryPoint = "wgpuBufferUnmap", CallingConvention = CallingConvention.Cdecl)]
        public static extern void BufferUnmap(Wgpu.BufferImpl buffer);
        
        /// <summary>
        /// Methods of CommandEncoder
        /// </summary>
        [DllImport("libwgpu", EntryPoint = "wgpuCommandEncoderBeginComputePass", CallingConvention = CallingConvention.Cdecl)]
        public static extern Wgpu.ComputePassEncoderImpl CommandEncoderBeginComputePass(Wgpu.CommandEncoderImpl commandEncoder, in Wgpu.ComputePassDescriptor descriptor);
        
        [DllImport("libwgpu", EntryPoint = "wgpuCommandEncoderBeginRenderPass", CallingConvention = CallingConvention.Cdecl)]
        public static extern Wgpu.RenderPassEncoderImpl CommandEncoderBeginRenderPass(Wgpu.CommandEncoderImpl commandEncoder, in Wgpu.RenderPassDescriptor descriptor);
        
        [DllImport("libwgpu", EntryPoint = "wgpuCommandEncoderCopyBufferToBuffer", CallingConvention = CallingConvention.Cdecl)]
        public static extern void CommandEncoderCopyBufferToBuffer(Wgpu.CommandEncoderImpl commandEncoder, Wgpu.BufferImpl source, ulong sourceOffset, Wgpu.BufferImpl destination, ulong destinationOffset, ulong size);
        
        [DllImport("libwgpu", EntryPoint = "wgpuCommandEncoderCopyBufferToTexture", CallingConvention = CallingConvention.Cdecl)]
        public static extern void CommandEncoderCopyBufferToTexture(Wgpu.CommandEncoderImpl commandEncoder, in Wgpu.ImageCopyBuffer source, in Wgpu.ImageCopyTexture destination, in Wgpu.Extent3D copySize);
        
        [DllImport("libwgpu", EntryPoint = "wgpuCommandEncoderCopyTextureToBuffer", CallingConvention = CallingConvention.Cdecl)]
        public static extern void CommandEncoderCopyTextureToBuffer(Wgpu.CommandEncoderImpl commandEncoder, in Wgpu.ImageCopyTexture source, in Wgpu.ImageCopyBuffer destination, in Wgpu.Extent3D copySize);
        
        [DllImport("libwgpu", EntryPoint = "wgpuCommandEncoderCopyTextureToTexture", CallingConvention = CallingConvention.Cdecl)]
        public static extern void CommandEncoderCopyTextureToTexture(Wgpu.CommandEncoderImpl commandEncoder, in Wgpu.ImageCopyTexture source, in Wgpu.ImageCopyTexture destination, in Wgpu.Extent3D copySize);
        
        [DllImport("libwgpu", EntryPoint = "wgpuCommandEncoderFinish", CallingConvention = CallingConvention.Cdecl)]
        public static extern Wgpu.CommandBufferImpl CommandEncoderFinish(Wgpu.CommandEncoderImpl commandEncoder, in Wgpu.CommandBufferDescriptor descriptor);
        
        [DllImport("libwgpu", EntryPoint = "wgpuCommandEncoderInsertDebugMarker", CallingConvention = CallingConvention.Cdecl)]
        public static extern void CommandEncoderInsertDebugMarker(Wgpu.CommandEncoderImpl commandEncoder, [MarshalAs(UnmanagedType.LPStr)] string markerLabel);
        
        [DllImport("libwgpu", EntryPoint = "wgpuCommandEncoderPopDebugGroup", CallingConvention = CallingConvention.Cdecl)]
        public static extern void CommandEncoderPopDebugGroup(Wgpu.CommandEncoderImpl commandEncoder);
        
        [DllImport("libwgpu", EntryPoint = "wgpuCommandEncoderPushDebugGroup", CallingConvention = CallingConvention.Cdecl)]
        public static extern void CommandEncoderPushDebugGroup(Wgpu.CommandEncoderImpl commandEncoder, [MarshalAs(UnmanagedType.LPStr)] string groupLabel);
        
        [DllImport("libwgpu", EntryPoint = "wgpuCommandEncoderResolveQuerySet", CallingConvention = CallingConvention.Cdecl)]
        public static extern void CommandEncoderResolveQuerySet(Wgpu.CommandEncoderImpl commandEncoder, Wgpu.QuerySetImpl querySet, uint firstQuery, uint queryCount, Wgpu.BufferImpl destination, ulong destinationOffset);
        
        [DllImport("libwgpu", EntryPoint = "wgpuCommandEncoderWriteTimestamp", CallingConvention = CallingConvention.Cdecl)]
        public static extern void CommandEncoderWriteTimestamp(Wgpu.CommandEncoderImpl commandEncoder, Wgpu.QuerySetImpl querySet, uint queryIndex);
        
        /// <summary>
        /// Methods of ComputePassEncoder
        /// </summary>
        [DllImport("libwgpu", EntryPoint = "wgpuComputePassEncoderBeginPipelineStatisticsQuery", CallingConvention = CallingConvention.Cdecl)]
        public static extern void ComputePassEncoderBeginPipelineStatisticsQuery(Wgpu.ComputePassEncoderImpl computePassEncoder, Wgpu.QuerySetImpl querySet, uint queryIndex);
        
        [DllImport("libwgpu", EntryPoint = "wgpuComputePassEncoderDispatch", CallingConvention = CallingConvention.Cdecl)]
        public static extern void ComputePassEncoderDispatch(Wgpu.ComputePassEncoderImpl computePassEncoder, uint x, uint y, uint z);
        
        [DllImport("libwgpu", EntryPoint = "wgpuComputePassEncoderDispatchIndirect", CallingConvention = CallingConvention.Cdecl)]
        public static extern void ComputePassEncoderDispatchIndirect(Wgpu.ComputePassEncoderImpl computePassEncoder, Wgpu.BufferImpl indirectBuffer, ulong indirectOffset);
        
        [DllImport("libwgpu", EntryPoint = "wgpuComputePassEncoderEndPass", CallingConvention = CallingConvention.Cdecl)]
        public static extern void ComputePassEncoderEndPass(Wgpu.ComputePassEncoderImpl computePassEncoder);
        
        [DllImport("libwgpu", EntryPoint = "wgpuComputePassEncoderEndPipelineStatisticsQuery", CallingConvention = CallingConvention.Cdecl)]
        public static extern void ComputePassEncoderEndPipelineStatisticsQuery(Wgpu.ComputePassEncoderImpl computePassEncoder);
        
        [DllImport("libwgpu", EntryPoint = "wgpuComputePassEncoderInsertDebugMarker", CallingConvention = CallingConvention.Cdecl)]
        public static extern void ComputePassEncoderInsertDebugMarker(Wgpu.ComputePassEncoderImpl computePassEncoder, [MarshalAs(UnmanagedType.LPStr)] string markerLabel);
        
        [DllImport("libwgpu", EntryPoint = "wgpuComputePassEncoderPopDebugGroup", CallingConvention = CallingConvention.Cdecl)]
        public static extern void ComputePassEncoderPopDebugGroup(Wgpu.ComputePassEncoderImpl computePassEncoder);
        
        [DllImport("libwgpu", EntryPoint = "wgpuComputePassEncoderPushDebugGroup", CallingConvention = CallingConvention.Cdecl)]
        public static extern void ComputePassEncoderPushDebugGroup(Wgpu.ComputePassEncoderImpl computePassEncoder, [MarshalAs(UnmanagedType.LPStr)] string groupLabel);
        
        [DllImport("libwgpu", EntryPoint = "wgpuComputePassEncoderSetBindGroup", CallingConvention = CallingConvention.Cdecl)]
        public static extern void ComputePassEncoderSetBindGroup(Wgpu.ComputePassEncoderImpl computePassEncoder, uint groupIndex, Wgpu.BindGroupImpl group, uint dynamicOffsetCount, ref uint dynamicOffsets);
        
        [DllImport("libwgpu", EntryPoint = "wgpuComputePassEncoderSetPipeline", CallingConvention = CallingConvention.Cdecl)]
        public static extern void ComputePassEncoderSetPipeline(Wgpu.ComputePassEncoderImpl computePassEncoder, Wgpu.ComputePipelineImpl pipeline);
        
        [DllImport("libwgpu", EntryPoint = "wgpuComputePassEncoderWriteTimestamp", CallingConvention = CallingConvention.Cdecl)]
        public static extern void ComputePassEncoderWriteTimestamp(Wgpu.ComputePassEncoderImpl computePassEncoder, Wgpu.QuerySetImpl querySet, uint queryIndex);
        
        /// <summary>
        /// Methods of ComputePipeline
        /// </summary>
        [DllImport("libwgpu", EntryPoint = "wgpuComputePipelineGetBindGroupLayout", CallingConvention = CallingConvention.Cdecl)]
        public static extern Wgpu.BindGroupLayoutImpl ComputePipelineGetBindGroupLayout(Wgpu.ComputePipelineImpl computePipeline, uint groupIndex);
        
        [DllImport("libwgpu", EntryPoint = "wgpuComputePipelineSetLabel", CallingConvention = CallingConvention.Cdecl)]
        public static extern void ComputePipelineSetLabel(Wgpu.ComputePipelineImpl computePipeline, [MarshalAs(UnmanagedType.LPStr)] string label);
        
        /// <summary>
        /// Methods of Device
        /// </summary>
        [DllImport("libwgpu", EntryPoint = "wgpuDeviceCreateBindGroup", CallingConvention = CallingConvention.Cdecl)]
        public static extern Wgpu.BindGroupImpl DeviceCreateBindGroup(Wgpu.DeviceImpl device, in Wgpu.BindGroupDescriptor descriptor);
        
        [DllImport("libwgpu", EntryPoint = "wgpuDeviceCreateBindGroupLayout", CallingConvention = CallingConvention.Cdecl)]
        public static extern Wgpu.BindGroupLayoutImpl DeviceCreateBindGroupLayout(Wgpu.DeviceImpl device, in Wgpu.BindGroupLayoutDescriptor descriptor);
        
        [DllImport("libwgpu", EntryPoint = "wgpuDeviceCreateBuffer", CallingConvention = CallingConvention.Cdecl)]
        public static extern Wgpu.BufferImpl DeviceCreateBuffer(Wgpu.DeviceImpl device, in Wgpu.BufferDescriptor descriptor);
        
        [DllImport("libwgpu", EntryPoint = "wgpuDeviceCreateCommandEncoder", CallingConvention = CallingConvention.Cdecl)]
        public static extern Wgpu.CommandEncoderImpl DeviceCreateCommandEncoder(Wgpu.DeviceImpl device, in Wgpu.CommandEncoderDescriptor descriptor);
        
        [DllImport("libwgpu", EntryPoint = "wgpuDeviceCreateComputePipeline", CallingConvention = CallingConvention.Cdecl)]
        public static extern Wgpu.ComputePipelineImpl DeviceCreateComputePipeline(Wgpu.DeviceImpl device, in Wgpu.ComputePipelineDescriptor descriptor);
        
        [DllImport("libwgpu", EntryPoint = "wgpuDeviceCreateComputePipelineAsync", CallingConvention = CallingConvention.Cdecl)]
        public static extern void DeviceCreateComputePipelineAsync(Wgpu.DeviceImpl device, in Wgpu.ComputePipelineDescriptor descriptor, Wgpu.CreateComputePipelineAsyncCallback callback, IntPtr userdata);
        
        [DllImport("libwgpu", EntryPoint = "wgpuDeviceCreatePipelineLayout", CallingConvention = CallingConvention.Cdecl)]
        public static extern Wgpu.PipelineLayoutImpl DeviceCreatePipelineLayout(Wgpu.DeviceImpl device, in Wgpu.PipelineLayoutDescriptor descriptor);
        
        [DllImport("libwgpu", EntryPoint = "wgpuDeviceCreateQuerySet", CallingConvention = CallingConvention.Cdecl)]
        public static extern Wgpu.QuerySetImpl DeviceCreateQuerySet(Wgpu.DeviceImpl device, in Wgpu.QuerySetDescriptor descriptor);
        
        [DllImport("libwgpu", EntryPoint = "wgpuDeviceCreateRenderBundleEncoder", CallingConvention = CallingConvention.Cdecl)]
        public static extern Wgpu.RenderBundleEncoderImpl DeviceCreateRenderBundleEncoder(Wgpu.DeviceImpl device, in Wgpu.RenderBundleEncoderDescriptor descriptor);
        
        [DllImport("libwgpu", EntryPoint = "wgpuDeviceCreateRenderPipeline", CallingConvention = CallingConvention.Cdecl)]
        public static extern Wgpu.RenderPipelineImpl DeviceCreateRenderPipeline(Wgpu.DeviceImpl device, in Wgpu.RenderPipelineDescriptor descriptor);
        
        [DllImport("libwgpu", EntryPoint = "wgpuDeviceCreateRenderPipelineAsync", CallingConvention = CallingConvention.Cdecl)]
        public static extern void DeviceCreateRenderPipelineAsync(Wgpu.DeviceImpl device, in Wgpu.RenderPipelineDescriptor descriptor, Wgpu.CreateRenderPipelineAsyncCallback callback, IntPtr userdata);
        
        [DllImport("libwgpu", EntryPoint = "wgpuDeviceCreateSampler", CallingConvention = CallingConvention.Cdecl)]
        public static extern Wgpu.SamplerImpl DeviceCreateSampler(Wgpu.DeviceImpl device, in Wgpu.SamplerDescriptor descriptor);
        
        [DllImport("libwgpu", EntryPoint = "wgpuDeviceCreateShaderModule", CallingConvention = CallingConvention.Cdecl)]
        public static extern Wgpu.ShaderModuleImpl DeviceCreateShaderModule(Wgpu.DeviceImpl device, in Wgpu.ShaderModuleDescriptor descriptor);
        
        [DllImport("libwgpu", EntryPoint = "wgpuDeviceCreateSwapChain", CallingConvention = CallingConvention.Cdecl)]
        public static extern Wgpu.SwapChainImpl DeviceCreateSwapChain(Wgpu.DeviceImpl device, Wgpu.SurfaceImpl surface, in Wgpu.SwapChainDescriptor descriptor);
        
        [DllImport("libwgpu", EntryPoint = "wgpuDeviceCreateTexture", CallingConvention = CallingConvention.Cdecl)]
        public static extern Wgpu.TextureImpl DeviceCreateTexture(Wgpu.DeviceImpl device, in Wgpu.TextureDescriptor descriptor);
        
        [DllImport("libwgpu", EntryPoint = "wgpuDeviceDestroy", CallingConvention = CallingConvention.Cdecl)]
        public static extern void DeviceDestroy(Wgpu.DeviceImpl device);
        
        [DllImport("libwgpu", EntryPoint = "wgpuDeviceGetLimits", CallingConvention = CallingConvention.Cdecl)]
        [return:MarshalAs(UnmanagedType.U1)]
        public static extern bool DeviceGetLimits(Wgpu.DeviceImpl device, ref Wgpu.SupportedLimits limits);
        
        [DllImport("libwgpu", EntryPoint = "wgpuDeviceGetQueue", CallingConvention = CallingConvention.Cdecl)]
        public static extern Wgpu.QueueImpl DeviceGetQueue(Wgpu.DeviceImpl device);
        
        [DllImport("libwgpu", EntryPoint = "wgpuDevicePopErrorScope", CallingConvention = CallingConvention.Cdecl)]
        [return:MarshalAs(UnmanagedType.U1)]
        public static extern bool DevicePopErrorScope(Wgpu.DeviceImpl device, Wgpu.ErrorCallback callback, IntPtr userdata);
        
        [DllImport("libwgpu", EntryPoint = "wgpuDevicePushErrorScope", CallingConvention = CallingConvention.Cdecl)]
        public static extern void DevicePushErrorScope(Wgpu.DeviceImpl device, Wgpu.ErrorFilter filter);
        
        [DllImport("libwgpu", EntryPoint = "wgpuDeviceSetDeviceLostCallback", CallingConvention = CallingConvention.Cdecl)]
        public static extern void DeviceSetDeviceLostCallback(Wgpu.DeviceImpl device, Wgpu.DeviceLostCallback callback, IntPtr userdata);
        
        [DllImport("libwgpu", EntryPoint = "wgpuDeviceSetUncapturedErrorCallback", CallingConvention = CallingConvention.Cdecl)]
        public static extern void DeviceSetUncapturedErrorCallback(Wgpu.DeviceImpl device, Wgpu.ErrorCallback callback, IntPtr userdata);
        
        /// <summary>
        /// Methods of Instance
        /// </summary>
        [DllImport("libwgpu", EntryPoint = "wgpuInstanceCreateSurface", CallingConvention = CallingConvention.Cdecl)]
        public static extern Wgpu.SurfaceImpl InstanceCreateSurface(Wgpu.InstanceImpl instance, in Wgpu.SurfaceDescriptor descriptor);
        
        [DllImport("libwgpu", EntryPoint = "wgpuInstanceProcessEvents", CallingConvention = CallingConvention.Cdecl)]
        public static extern void InstanceProcessEvents(Wgpu.InstanceImpl instance);
        
        [DllImport("libwgpu", EntryPoint = "wgpuInstanceRequestAdapter", CallingConvention = CallingConvention.Cdecl)]
        public static extern void InstanceRequestAdapter(Wgpu.InstanceImpl instance, in Wgpu.RequestAdapterOptions options, Wgpu.RequestAdapterCallback callback, IntPtr userdata);
        
        /// <summary>
        /// Methods of QuerySet
        /// </summary>
        [DllImport("libwgpu", EntryPoint = "wgpuQuerySetDestroy", CallingConvention = CallingConvention.Cdecl)]
        public static extern void QuerySetDestroy(Wgpu.QuerySetImpl querySet);
        
        /// <summary>
        /// Methods of Queue
        /// </summary>
        [DllImport("libwgpu", EntryPoint = "wgpuQueueOnSubmittedWorkDone", CallingConvention = CallingConvention.Cdecl)]
        public static extern void QueueOnSubmittedWorkDone(Wgpu.QueueImpl queue, ulong signalValue, Wgpu.QueueWorkDoneCallback callback, IntPtr userdata);
        
        [DllImport("libwgpu", EntryPoint = "wgpuQueueSubmit", CallingConvention = CallingConvention.Cdecl)]
        public static extern void QueueSubmit(Wgpu.QueueImpl queue, uint commandCount, ref Wgpu.CommandBufferImpl commands);
        
        [DllImport("libwgpu", EntryPoint = "wgpuQueueWriteBuffer", CallingConvention = CallingConvention.Cdecl)]
        public static extern void QueueWriteBuffer(Wgpu.QueueImpl queue, Wgpu.BufferImpl buffer, ulong bufferOffset, IntPtr data, ulong size);
        
        [DllImport("libwgpu", EntryPoint = "wgpuQueueWriteTexture", CallingConvention = CallingConvention.Cdecl)]
        public static extern void QueueWriteTexture(Wgpu.QueueImpl queue, in Wgpu.ImageCopyTexture destination, IntPtr data, ulong dataSize, in Wgpu.TextureDataLayout dataLayout, in Wgpu.Extent3D writeSize);
        
        /// <summary>
        /// Methods of RenderBundleEncoder
        /// </summary>
        [DllImport("libwgpu", EntryPoint = "wgpuRenderBundleEncoderDraw", CallingConvention = CallingConvention.Cdecl)]
        public static extern void RenderBundleEncoderDraw(Wgpu.RenderBundleEncoderImpl renderBundleEncoder, uint vertexCount, uint instanceCount, uint firstVertex, uint firstInstance);
        
        [DllImport("libwgpu", EntryPoint = "wgpuRenderBundleEncoderDrawIndexed", CallingConvention = CallingConvention.Cdecl)]
        public static extern void RenderBundleEncoderDrawIndexed(Wgpu.RenderBundleEncoderImpl renderBundleEncoder, uint indexCount, uint instanceCount, uint firstIndex, int baseVertex, uint firstInstance);
        
        [DllImport("libwgpu", EntryPoint = "wgpuRenderBundleEncoderDrawIndexedIndirect", CallingConvention = CallingConvention.Cdecl)]
        public static extern void RenderBundleEncoderDrawIndexedIndirect(Wgpu.RenderBundleEncoderImpl renderBundleEncoder, Wgpu.BufferImpl indirectBuffer, ulong indirectOffset);
        
        [DllImport("libwgpu", EntryPoint = "wgpuRenderBundleEncoderDrawIndirect", CallingConvention = CallingConvention.Cdecl)]
        public static extern void RenderBundleEncoderDrawIndirect(Wgpu.RenderBundleEncoderImpl renderBundleEncoder, Wgpu.BufferImpl indirectBuffer, ulong indirectOffset);
        
        [DllImport("libwgpu", EntryPoint = "wgpuRenderBundleEncoderFinish", CallingConvention = CallingConvention.Cdecl)]
        public static extern Wgpu.RenderBundleImpl RenderBundleEncoderFinish(Wgpu.RenderBundleEncoderImpl renderBundleEncoder, in Wgpu.RenderBundleDescriptor descriptor);
        
        [DllImport("libwgpu", EntryPoint = "wgpuRenderBundleEncoderInsertDebugMarker", CallingConvention = CallingConvention.Cdecl)]
        public static extern void RenderBundleEncoderInsertDebugMarker(Wgpu.RenderBundleEncoderImpl renderBundleEncoder, [MarshalAs(UnmanagedType.LPStr)] string markerLabel);
        
        [DllImport("libwgpu", EntryPoint = "wgpuRenderBundleEncoderPopDebugGroup", CallingConvention = CallingConvention.Cdecl)]
        public static extern void RenderBundleEncoderPopDebugGroup(Wgpu.RenderBundleEncoderImpl renderBundleEncoder);
        
        [DllImport("libwgpu", EntryPoint = "wgpuRenderBundleEncoderPushDebugGroup", CallingConvention = CallingConvention.Cdecl)]
        public static extern void RenderBundleEncoderPushDebugGroup(Wgpu.RenderBundleEncoderImpl renderBundleEncoder, [MarshalAs(UnmanagedType.LPStr)] string groupLabel);
        
        [DllImport("libwgpu", EntryPoint = "wgpuRenderBundleEncoderSetBindGroup", CallingConvention = CallingConvention.Cdecl)]
        public static extern void RenderBundleEncoderSetBindGroup(Wgpu.RenderBundleEncoderImpl renderBundleEncoder, uint groupIndex, Wgpu.BindGroupImpl group, uint dynamicOffsetCount, ref uint dynamicOffsets);
        
        [DllImport("libwgpu", EntryPoint = "wgpuRenderBundleEncoderSetIndexBuffer", CallingConvention = CallingConvention.Cdecl)]
        public static extern void RenderBundleEncoderSetIndexBuffer(Wgpu.RenderBundleEncoderImpl renderBundleEncoder, Wgpu.BufferImpl buffer, Wgpu.IndexFormat format, ulong offset, ulong size);
        
        [DllImport("libwgpu", EntryPoint = "wgpuRenderBundleEncoderSetPipeline", CallingConvention = CallingConvention.Cdecl)]
        public static extern void RenderBundleEncoderSetPipeline(Wgpu.RenderBundleEncoderImpl renderBundleEncoder, Wgpu.RenderPipelineImpl pipeline);
        
        [DllImport("libwgpu", EntryPoint = "wgpuRenderBundleEncoderSetVertexBuffer", CallingConvention = CallingConvention.Cdecl)]
        public static extern void RenderBundleEncoderSetVertexBuffer(Wgpu.RenderBundleEncoderImpl renderBundleEncoder, uint slot, Wgpu.BufferImpl buffer, ulong offset, ulong size);
        
        /// <summary>
        /// Methods of RenderPassEncoder
        /// </summary>
        [DllImport("libwgpu", EntryPoint = "wgpuRenderPassEncoderBeginOcclusionQuery", CallingConvention = CallingConvention.Cdecl)]
        public static extern void RenderPassEncoderBeginOcclusionQuery(Wgpu.RenderPassEncoderImpl renderPassEncoder, uint queryIndex);
        
        [DllImport("libwgpu", EntryPoint = "wgpuRenderPassEncoderBeginPipelineStatisticsQuery", CallingConvention = CallingConvention.Cdecl)]
        public static extern void RenderPassEncoderBeginPipelineStatisticsQuery(Wgpu.RenderPassEncoderImpl renderPassEncoder, Wgpu.QuerySetImpl querySet, uint queryIndex);
        
        [DllImport("libwgpu", EntryPoint = "wgpuRenderPassEncoderDraw", CallingConvention = CallingConvention.Cdecl)]
        public static extern void RenderPassEncoderDraw(Wgpu.RenderPassEncoderImpl renderPassEncoder, uint vertexCount, uint instanceCount, uint firstVertex, uint firstInstance);
        
        [DllImport("libwgpu", EntryPoint = "wgpuRenderPassEncoderDrawIndexed", CallingConvention = CallingConvention.Cdecl)]
        public static extern void RenderPassEncoderDrawIndexed(Wgpu.RenderPassEncoderImpl renderPassEncoder, uint indexCount, uint instanceCount, uint firstIndex, int baseVertex, uint firstInstance);
        
        [DllImport("libwgpu", EntryPoint = "wgpuRenderPassEncoderDrawIndexedIndirect", CallingConvention = CallingConvention.Cdecl)]
        public static extern void RenderPassEncoderDrawIndexedIndirect(Wgpu.RenderPassEncoderImpl renderPassEncoder, Wgpu.BufferImpl indirectBuffer, ulong indirectOffset);
        
        [DllImport("libwgpu", EntryPoint = "wgpuRenderPassEncoderDrawIndirect", CallingConvention = CallingConvention.Cdecl)]
        public static extern void RenderPassEncoderDrawIndirect(Wgpu.RenderPassEncoderImpl renderPassEncoder, Wgpu.BufferImpl indirectBuffer, ulong indirectOffset);
        
        [DllImport("libwgpu", EntryPoint = "wgpuRenderPassEncoderEndOcclusionQuery", CallingConvention = CallingConvention.Cdecl)]
        public static extern void RenderPassEncoderEndOcclusionQuery(Wgpu.RenderPassEncoderImpl renderPassEncoder);
        
        [DllImport("libwgpu", EntryPoint = "wgpuRenderPassEncoderEndPass", CallingConvention = CallingConvention.Cdecl)]
        public static extern void RenderPassEncoderEndPass(Wgpu.RenderPassEncoderImpl renderPassEncoder);
        
        [DllImport("libwgpu", EntryPoint = "wgpuRenderPassEncoderEndPipelineStatisticsQuery", CallingConvention = CallingConvention.Cdecl)]
        public static extern void RenderPassEncoderEndPipelineStatisticsQuery(Wgpu.RenderPassEncoderImpl renderPassEncoder);
        
        [DllImport("libwgpu", EntryPoint = "wgpuRenderPassEncoderExecuteBundles", CallingConvention = CallingConvention.Cdecl)]
        public static extern void RenderPassEncoderExecuteBundles(Wgpu.RenderPassEncoderImpl renderPassEncoder, uint bundlesCount, ref Wgpu.RenderBundleImpl bundles);
        
        [DllImport("libwgpu", EntryPoint = "wgpuRenderPassEncoderInsertDebugMarker", CallingConvention = CallingConvention.Cdecl)]
        public static extern void RenderPassEncoderInsertDebugMarker(Wgpu.RenderPassEncoderImpl renderPassEncoder, [MarshalAs(UnmanagedType.LPStr)] string markerLabel);
        
        [DllImport("libwgpu", EntryPoint = "wgpuRenderPassEncoderPopDebugGroup", CallingConvention = CallingConvention.Cdecl)]
        public static extern void RenderPassEncoderPopDebugGroup(Wgpu.RenderPassEncoderImpl renderPassEncoder);
        
        [DllImport("libwgpu", EntryPoint = "wgpuRenderPassEncoderPushDebugGroup", CallingConvention = CallingConvention.Cdecl)]
        public static extern void RenderPassEncoderPushDebugGroup(Wgpu.RenderPassEncoderImpl renderPassEncoder, [MarshalAs(UnmanagedType.LPStr)] string groupLabel);
        
        [DllImport("libwgpu", EntryPoint = "wgpuRenderPassEncoderSetBindGroup", CallingConvention = CallingConvention.Cdecl)]
        public static extern void RenderPassEncoderSetBindGroup(Wgpu.RenderPassEncoderImpl renderPassEncoder, uint groupIndex, Wgpu.BindGroupImpl group, uint dynamicOffsetCount, ref uint dynamicOffsets);
        
        [DllImport("libwgpu", EntryPoint = "wgpuRenderPassEncoderSetBlendConstant", CallingConvention = CallingConvention.Cdecl)]
        public static extern void RenderPassEncoderSetBlendConstant(Wgpu.RenderPassEncoderImpl renderPassEncoder, in Wgpu.Color color);
        
        [DllImport("libwgpu", EntryPoint = "wgpuRenderPassEncoderSetIndexBuffer", CallingConvention = CallingConvention.Cdecl)]
        public static extern void RenderPassEncoderSetIndexBuffer(Wgpu.RenderPassEncoderImpl renderPassEncoder, Wgpu.BufferImpl buffer, Wgpu.IndexFormat format, ulong offset, ulong size);
        
        [DllImport("libwgpu", EntryPoint = "wgpuRenderPassEncoderSetPipeline", CallingConvention = CallingConvention.Cdecl)]
        public static extern void RenderPassEncoderSetPipeline(Wgpu.RenderPassEncoderImpl renderPassEncoder, Wgpu.RenderPipelineImpl pipeline);
        
        [DllImport("libwgpu", EntryPoint = "wgpuRenderPassEncoderSetScissorRect", CallingConvention = CallingConvention.Cdecl)]
        public static extern void RenderPassEncoderSetScissorRect(Wgpu.RenderPassEncoderImpl renderPassEncoder, uint x, uint y, uint width, uint height);
        
        [DllImport("libwgpu", EntryPoint = "wgpuRenderPassEncoderSetStencilReference", CallingConvention = CallingConvention.Cdecl)]
        public static extern void RenderPassEncoderSetStencilReference(Wgpu.RenderPassEncoderImpl renderPassEncoder, uint reference);
        
        [DllImport("libwgpu", EntryPoint = "wgpuRenderPassEncoderSetVertexBuffer", CallingConvention = CallingConvention.Cdecl)]
        public static extern void RenderPassEncoderSetVertexBuffer(Wgpu.RenderPassEncoderImpl renderPassEncoder, uint slot, Wgpu.BufferImpl buffer, ulong offset, ulong size);
        
        [DllImport("libwgpu", EntryPoint = "wgpuRenderPassEncoderSetViewport", CallingConvention = CallingConvention.Cdecl)]
        public static extern void RenderPassEncoderSetViewport(Wgpu.RenderPassEncoderImpl renderPassEncoder, float x, float y, float width, float height, float minDepth, float maxDepth);
        
        [DllImport("libwgpu", EntryPoint = "wgpuRenderPassEncoderWriteTimestamp", CallingConvention = CallingConvention.Cdecl)]
        public static extern void RenderPassEncoderWriteTimestamp(Wgpu.RenderPassEncoderImpl renderPassEncoder, Wgpu.QuerySetImpl querySet, uint queryIndex);
        
        /// <summary>
        /// Methods of RenderPipeline
        /// </summary>
        [DllImport("libwgpu", EntryPoint = "wgpuRenderPipelineGetBindGroupLayout", CallingConvention = CallingConvention.Cdecl)]
        public static extern Wgpu.BindGroupLayoutImpl RenderPipelineGetBindGroupLayout(Wgpu.RenderPipelineImpl renderPipeline, uint groupIndex);
        
        [DllImport("libwgpu", EntryPoint = "wgpuRenderPipelineSetLabel", CallingConvention = CallingConvention.Cdecl)]
        public static extern void RenderPipelineSetLabel(Wgpu.RenderPipelineImpl renderPipeline, [MarshalAs(UnmanagedType.LPStr)] string label);
        
        /// <summary>
        /// Methods of ShaderModule
        /// </summary>
        [DllImport("libwgpu", EntryPoint = "wgpuShaderModuleSetLabel", CallingConvention = CallingConvention.Cdecl)]
        public static extern void ShaderModuleSetLabel(Wgpu.ShaderModuleImpl shaderModule, [MarshalAs(UnmanagedType.LPStr)] string label);
        
        /// <summary>
        /// Methods of Surface
        /// </summary>
        [DllImport("libwgpu", EntryPoint = "wgpuSurfaceGetPreferredFormat", CallingConvention = CallingConvention.Cdecl)]
        public static extern Wgpu.TextureFormat SurfaceGetPreferredFormat(Wgpu.SurfaceImpl surface, Wgpu.AdapterImpl adapter);
        
        /// <summary>
        /// Methods of SwapChain
        /// </summary>
        [DllImport("libwgpu", EntryPoint = "wgpuSwapChainGetCurrentTextureView", CallingConvention = CallingConvention.Cdecl)]
        public static extern Wgpu.TextureViewImpl SwapChainGetCurrentTextureView(Wgpu.SwapChainImpl swapChain);
        
        [DllImport("libwgpu", EntryPoint = "wgpuSwapChainPresent", CallingConvention = CallingConvention.Cdecl)]
        public static extern void SwapChainPresent(Wgpu.SwapChainImpl swapChain);
        
        /// <summary>
        /// Methods of Texture
        /// </summary>
        [DllImport("libwgpu", EntryPoint = "wgpuTextureCreateView", CallingConvention = CallingConvention.Cdecl)]
        public static extern Wgpu.TextureViewImpl TextureCreateView(Wgpu.TextureImpl texture, in Wgpu.TextureViewDescriptor descriptor);
        
        [DllImport("libwgpu", EntryPoint = "wgpuTextureDestroy", CallingConvention = CallingConvention.Cdecl)]
        public static extern void TextureDestroy(Wgpu.TextureImpl texture);
        
        [DllImport("libwgpu", EntryPoint = "wgpuDevicePoll", CallingConvention = CallingConvention.Cdecl)]
        public static extern void DevicePoll(Wgpu.DeviceImpl device, [MarshalAs(UnmanagedType.U1)] bool forcewait);
        
        [DllImport("libwgpu", EntryPoint = "wgpuSetLogCallback", CallingConvention = CallingConvention.Cdecl)]
        public static extern void SetLogCallback(Wgpu.LogCallback callback);
        
        [DllImport("libwgpu", EntryPoint = "wgpuSetLogLevel", CallingConvention = CallingConvention.Cdecl)]
        public static extern void SetLogLevel(Wgpu.LogLevel level);
        
        [DllImport("libwgpu", EntryPoint = "wgpuGetVersion", CallingConvention = CallingConvention.Cdecl)]
        public static extern uint GetVersion();
        
        [DllImport("libwgpu", EntryPoint = "wgpuRenderPassEncoderSetPushConstants", CallingConvention = CallingConvention.Cdecl)]
        public static extern void RenderPassEncoderSetPushConstants(Wgpu.RenderPassEncoderImpl encoder, Wgpu.ShaderStage stages, uint offset, uint sizeBytes, IntPtr data);
        
        [DllImport("libwgpu", EntryPoint = "wgpuBufferDrop", CallingConvention = CallingConvention.Cdecl)]
        public static extern void BufferDrop(Wgpu.BufferImpl buffer);
        
        [DllImport("libwgpu", EntryPoint = "wgpuCommandEncoderDrop", CallingConvention = CallingConvention.Cdecl)]
        public static extern void CommandEncoderDrop(Wgpu.CommandEncoderImpl commandEncoder);
        
        [DllImport("libwgpu", EntryPoint = "wgpuDeviceDrop", CallingConvention = CallingConvention.Cdecl)]
        public static extern void DeviceDrop(Wgpu.DeviceImpl device);
        
        [DllImport("libwgpu", EntryPoint = "wgpuQuerySetDrop", CallingConvention = CallingConvention.Cdecl)]
        public static extern void QuerySetDrop(Wgpu.QuerySetImpl querySet);
        
        [DllImport("libwgpu", EntryPoint = "wgpuRenderPipelineDrop", CallingConvention = CallingConvention.Cdecl)]
        public static extern void RenderPipelineDrop(Wgpu.RenderPipelineImpl renderPipeline);
        
        [DllImport("libwgpu", EntryPoint = "wgpuTextureDrop", CallingConvention = CallingConvention.Cdecl)]
        public static extern void TextureDrop(Wgpu.TextureImpl texture);
        
        [DllImport("libwgpu", EntryPoint = "wgpuTextureViewDrop", CallingConvention = CallingConvention.Cdecl)]
        public static extern void TextureViewDrop(Wgpu.TextureViewImpl textureView);
        
        [DllImport("libwgpu", EntryPoint = "wgpuSamplerDrop", CallingConvention = CallingConvention.Cdecl)]
        public static extern void SamplerDrop(Wgpu.SamplerImpl sampler);
        
        [DllImport("libwgpu", EntryPoint = "wgpuBindGroupLayoutDrop", CallingConvention = CallingConvention.Cdecl)]
        public static extern void BindGroupLayoutDrop(Wgpu.BindGroupLayoutImpl bindGroupLayout);
        
        [DllImport("libwgpu", EntryPoint = "wgpuPipelineLayoutDrop", CallingConvention = CallingConvention.Cdecl)]
        public static extern void PipelineLayoutDrop(Wgpu.PipelineLayoutImpl pipelineLayout);
        
        [DllImport("libwgpu", EntryPoint = "wgpuBindGroupDrop", CallingConvention = CallingConvention.Cdecl)]
        public static extern void BindGroupDrop(Wgpu.BindGroupImpl bindGroup);
        
        [DllImport("libwgpu", EntryPoint = "wgpuShaderModuleDrop", CallingConvention = CallingConvention.Cdecl)]
        public static extern void ShaderModuleDrop(Wgpu.ShaderModuleImpl shaderModule);
        
        [DllImport("libwgpu", EntryPoint = "wgpuCommandBufferDrop", CallingConvention = CallingConvention.Cdecl)]
        public static extern void CommandBufferDrop(Wgpu.CommandBufferImpl commandBuffer);
        
        [DllImport("libwgpu", EntryPoint = "wgpuRenderBundleDrop", CallingConvention = CallingConvention.Cdecl)]
        public static extern void RenderBundleDrop(Wgpu.RenderBundleImpl renderBundle);
        
        [DllImport("libwgpu", EntryPoint = "wgpuComputePipelineDrop", CallingConvention = CallingConvention.Cdecl)]
        public static extern void ComputePipelineDrop(Wgpu.ComputePipelineImpl computePipeline);
    }
}
